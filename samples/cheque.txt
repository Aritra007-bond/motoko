-- Checking cheque.as:
type Account <: actor {credit : shared Int -> (); deposit : shared Cheque -> (); getBalance : shared () -> async Int; invoice : shared (Int, Account) -> async Cheque; isCompatible : shared (like Account) -> async Bool; join : shared Account -> (); split : shared Int -> async Account}
type Bank <: actor {getIssuer : shared () -> async Issuer; getReserve : shared () -> async Account}
type Cheque <: actor {deposit : shared () -> ()}
type Issuer <: actor {hasIssued : shared (like Account) -> async Bool}
let Account : class Int -> Account
let Bank : class Int -> Bank
let Cheque : class (Int, Account) -> Cheque
let Issuer : class () -> Issuer
let bank : Bank
let main : async (Account, Account)
let show : (Text, Account) -> ()
let showBalance : (Text, Int) -> ()
let test : () -> async (Account, Account)
let transfer : (Account, Account, Int) -> async ()
-- Interpreting cheque.as:
Bank(100)
  Issuer()
    <= {hasIssued = func}
  Account(100)
    <= {balance = 100; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
  <= {getIssuer = func; getReserve = func; issuer = {hasIssued = func}; reserve = {balance = 100; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}}
test()
  -> async cheque.as:76.39-88.2
  <= async _
<- async cheque.as:76.39-88.2
  -> message getReserve()
  => await cheque.as:77.17-77.40
<- message getReserve()
  getReserve()
    -> async cheque.as:7.32-7.51
    <= async _
<- async cheque.as:7.32-7.51
  <= {balance = 100; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
<- await cheque.as:77.17-77.40({balance = 100; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await cheque.as:78.12-78.35
<- message split(10)
  split(10)
    -> async cheque.as:32.39-35.4
    <= async _
<- async cheque.as:32.39-35.4
  Account(10)
    <= {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
  <= {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
<- await cheque.as:78.12-78.35({balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await cheque.as:79.12-79.35
<- message split(10)
  split(10)
    -> async cheque.as:32.39-35.4
    <= async _
<- async cheque.as:32.39-35.4
  Account(10)
    <= {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
  <= {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}
<- await cheque.as:79.12-79.35({balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    <= ()
  transfer({balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, 5)
    -> async cheque.as:64.79-67.2
    <= async _
  => await cheque.as:83.3-83.28
<- async cheque.as:64.79-67.2
  -> message invoice(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  => await cheque.as:65.16-65.53
<- message invoice(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  invoice(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    -> async cheque.as:41.59-44.4
    <= async _
<- async cheque.as:41.59-44.4
  Cheque(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    <= {current = 5; deposit = func}
  <= {current = 5; deposit = func}
<- await cheque.as:65.16-65.53({current = 5; deposit = func})
  -> message deposit({current = 5; deposit = func})
  <= ()
<- message deposit({current = 5; deposit = func})
  deposit({current = 5; deposit = func})
    -> message deposit()
    <= ()
<- message deposit()
  deposit()
    -> message credit(5)
    <= ()
<- await cheque.as:83.3-83.28()
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
    <= ()
  -> message getBalance()
  => await cheque.as:85.21-85.42
<- message credit(5)
  credit(5)
    <= ()
<- message getBalance()
  getBalance()
    -> async cheque.as:28.28-30.4
    <= async _
<- async cheque.as:28.28-30.4
  <= 5
<- await cheque.as:85.21-85.42(5)
  showBalance("b1", 5)
    <= ()
  -> message getBalance()
  => await cheque.as:86.21-86.42
<- message getBalance()
  getBalance()
    -> async cheque.as:28.28-30.4
    <= async _
<- async cheque.as:28.28-30.4
  <= 15
<- await cheque.as:86.21-86.42(15)
  showBalance("b2", 15)
    <= ()
  <= ({balance = 5; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, {balance = 15; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
-- Finished cheque.as:
let Account : class Int -> Account = class
let Bank : class Int -> Bank = class
let Cheque : class (Int, Account) -> Cheque = class
let Issuer : class () -> Issuer = class
let bank : Bank = {getIssuer = func; getReserve = func; issuer = {hasIssued = func}; reserve = {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}}
let main : async (Account, Account) = async ({balance = 5; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, {balance = 15; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
let show : (Text, Account) -> () = func
let showBalance : (Text, Int) -> () = func
let test : () -> async (Account, Account) = func
let transfer : (Account, Account, Int) -> async () = func

