-- Parsing ListClient.as:
-- Parsing ListLib.as:
-- Checking ListLib.as:
-- Checking ListClient.as:
type Stack = t<Int>
let List : module {type t<T> = ?(T, t<T>); cons : <T>(T, t<T>) -> t<T>; nil : <T>() -> t<T>}
let empty : ?(Int, t<Int>)
let push : (Int, Stack) -> Stack
-- Interpreting ListLib.as:
-- Interpreting ListClient.as:
nil()
  <= null
