-- Parsing ListClient.as:
-- Parsing ./ListLib.as:
-- Checking all:
type Stack = t<Int>
type t<T> = ?(T, t<T>)
let List : module {type t<T> = ?(T, t<T>); cons : <T>(T, t<T>) -> t<T>; nil : <T>() -> t<T>}
let empty : ?(Int, t<Int>)
let file$./ListLib.as : module {type t<T> = ?(T, t<T>); cons : <T>(T, t<T>) -> t<T>; nil : <T>() -> t<T>}
let push : (Int, Stack) -> Stack
-- Interpreting all:
nil()
  <= null
-- Finished all:
let List : module {type t<T> = ?(T, t<T>); cons : <T>(T, t<T>) -> t<T>; nil : <T>() -> t<T>} = {cons = func; nil = func}
let empty : ?(Int, t<Int>) = null
let push : (Int, Stack) -> Stack = func

