type my_type = nat;
type B = my_type;
type C = E;
type E = opt C;
type message = record { 
  name : text;
  2 : C;
  unavailable; 
};
type tree = variant {
  leaf : int;
  branch : record { left : tree; val : int; right : tree };
};
type broker = service {
  find : (name : text) -> 
    (service {up:() -> (); current:() -> nat});
};
type stream = opt record {head:nat; next:func ()->[pure] stream};

service user {
  addUser : nat -> [sensitive,update] (my_type);
  userName : (nat) -> [pure] stream;
};
service D : broker;

