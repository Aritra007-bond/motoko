Interpreter:
-- Checking while.as:
let passed : Bool
let test : () -> Int
-- Interpreting while.as:
test()
  <= 0
-- Finished while.as:
let passed : Bool = true
let test : () -> Int = func

Compiler:
compile_exp: (LabelE
  count
  (TupT)
  (WhileE
    (RelE (VarE i) GtOp (UnE NegOp (LitE (NatLit 10))))
    (LabelE
      continue count
      (TupT)
      (BlockE
        (ExpD (AssignE (VarE i) (BinE (VarE i) SubOp (LitE (IntLit 1)))))
        (ExpD
          (IfE
            (RelE (VarE i) EqOp (LitE (NatLit 0)))
            (BreakE count (TupE))
            (TupE)
          )
        )
        (ExpD (BreakE continue count (TupE)))
        (ExpD (RetE (UnE NegOp (LitE (IntLit 1)))))
      )
    )
  )
)
(module
  (type $0 (func (result i32)))
  (type $1 (func))
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 0)
    (local i32 i32)
    (i32.const 10)
    (set_local 1)
    (unreachable)
    (get_local 1)
    (return)
  )
  (func $1 (type 1) (local i32 i32) (call 0) (i32.const 0) (i32.eq) (set_local 1))
  (start 1)
)
Interpreting the .wat:
while.wat:11.5-11.18: runtime trap: unreachable executed
