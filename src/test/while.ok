Interpreter:
-- Checking while.as:
let passed : Bool
let test : () -> Int
-- Interpreting while.as:
test()
  <= 0
-- Finished while.as:
let passed : Bool = true
let test : () -> Int = func

Compiler:
(module
  (type $0 (func (result i32)))
  (type $1 (func))
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 0)
    (local i32 i32)
    (i32.const 10)
    (set_local 1)
    (block
      (loop
        (get_local 1)
        (i32.const 10)
        (set_local 0)
        (i32.const 0)
        (get_local 0)
        (i32.sub)
        (i32.gt_s)
        (if
          (then
            (block
              (get_local 1)
              (i32.const 1)
              (i32.sub)
              (set_local 1)
              (get_local 1)
              (i32.const 0)
              (i32.eq)
              (if (then (br 4)) (else))
              (br 0)
              (i32.const 1)
              (set_local 0)
              (i32.const 0)
              (get_local 0)
              (i32.sub)
              (return)
            )
            (br 1)
          )
          (else)
        )
      )
    )
    (get_local 1)
    (return)
  )
  (func $1
    (type 1)
    (local i32 i32)
    (call 0)
    (i32.const 0)
    (i32.eq)
    (set_local 1)
    (get_local 1)
    (if (then) (else (unreachable)))
  )
  (start 1)
)
Interpreting the .wat:
