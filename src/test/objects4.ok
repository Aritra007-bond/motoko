Interpreter:
-- Checking objects4.as:
let oddeven : {even : Int -> Bool; odd : Int -> Bool}
-- Interpreting objects4.as:
even(10)
  even(9)
    even(8)
      even(7)
        even(6)
          even(5)
            even(4)
              even(3)
                even(2)
                  even(1)
                    even(0)
                      <= true
                    <= true
                  <= true
                <= true
              <= true
            <= true
          <= true
        <= true
      <= true
    <= true
  <= true
-- Finished objects4.as:
let oddeven : {even : Int -> Bool; odd : Int -> Bool} = {even = func; odd = func}

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 3 3 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (get_local 4)
    (i32.load)
    (i32.const 0)
    (i32.gt_s)
    (if
      (result i32)
      (then
        (get_local 3)
        (i32.load)
        (i32.load offset=4)
        (set_local 5)
        (get_local 5)
        (get_local 4)
        (i32.load)
        (i32.const 1)
        (i32.sub)
        (get_local 5)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (i32.const 0))
    )
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (get_local 4)
    (i32.load)
    (i32.const 0)
    (i32.gt_s)
    (if
      (result i32)
      (then
        (get_local 3)
        (i32.load)
        (i32.load)
        (set_local 5)
        (get_local 5)
        (get_local 4)
        (i32.load)
        (i32.const 1)
        (i32.sub)
        (get_local 5)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (i32.const 1))
    )
  )
  (func $2
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 3)
    (i32.const 4)
    (i32.add)
    (set_local 4)
    (get_local 3)
    (i32.const 0)
    (i32.add)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 3)
    (i32.store)
    (get_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 8)
    (get_local 7)
    (i32.store)
    (get_local 7)
    (i32.const 0)
    (i32.store)
    (get_local 7)
    (get_local 6)
    (i32.store offset=4)
    (get_local 7)
    (i32.store offset=4)
    (get_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 9)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 10)
    (get_local 9)
    (i32.store)
    (get_local 9)
    (i32.const 1)
    (i32.store)
    (get_local 9)
    (get_local 6)
    (i32.store offset=4)
    (get_local 9)
    (i32.store)
    (get_local 3)
    (set_local 0)
    (get_local 1)
    (get_local 0)
    (i32.store)
    (get_local 1)
    (i32.load)
    (i32.load)
    (set_local 2)
    (get_local 2)
    (i32.const 10)
    (get_local 2)
    (i32.load)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 2)
  (elem 0 (offset (i32.const 0)) 0 1 2)
)
Interpreting the .wat:
