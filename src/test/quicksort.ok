Interpreter:
-- Checking quicksort.as:
type QS<T> <: {quicksort : (var T[], Nat, Nat) -> ()}
let QS : <T>((T, T) -> Int) -> QS<T>
let a : var Int[]
let cmpi : (Int, Int) -> Int
let qs : QS<Int>
-- Interpreting quicksort.as:
QS(func)
  <= {partition = func; quicksort = func; swap = func; trace = func}
quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
    trace([8, 3, 9, 5, 2])
      <= ()
    cmpi(8, 8)
      <= 0
    cmpi(2, 8)
      <= -6
    swap([8, 3, 9, 5, 2], 0, 4)
      <= ()
    cmpi(2, 8)
      <= -6
    cmpi(3, 8)
      <= -5
    cmpi(9, 8)
      <= 1
    cmpi(8, 8)
      <= 0
    swap([2, 3, 9, 5, 8], 2, 4)
      <= ()
    cmpi(8, 8)
      <= 0
    cmpi(9, 8)
      <= 1
    cmpi(5, 8)
      <= -3
    swap([2, 3, 8, 5, 9], 2, 3)
      <= ()
    cmpi(5, 8)
      <= -3
    cmpi(8, 8)
      <= 0
    cmpi(8, 8)
      <= 0
    <= 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
    partition([2, 3, 5, 8, 9], 0, 3)
      trace([2, 3, 5, 8, 9])
        <= ()
      cmpi(2, 2)
        <= 0
      cmpi(8, 2)
        <= 6
      cmpi(5, 2)
        <= 3
      cmpi(3, 2)
        <= 1
      cmpi(2, 2)
        <= 0
      <= 0
    quicksort([2, 3, 5, 8, 9], 0, 0)
      <= ()
    quicksort([2, 3, 5, 8, 9], 1, 3)
      partition([2, 3, 5, 8, 9], 1, 3)
        trace([2, 3, 5, 8, 9])
          <= ()
        cmpi(3, 3)
          <= 0
        cmpi(8, 3)
          <= 5
        cmpi(5, 3)
          <= 2
        cmpi(3, 3)
          <= 0
        <= 1
      quicksort([2, 3, 5, 8, 9], 1, 1)
        <= ()
      quicksort([2, 3, 5, 8, 9], 2, 3)
        partition([2, 3, 5, 8, 9], 2, 3)
          trace([2, 3, 5, 8, 9])
            <= ()
          cmpi(5, 5)
            <= 0
          cmpi(8, 5)
            <= 3
          cmpi(5, 5)
            <= 0
          <= 2
        quicksort([2, 3, 5, 8, 9], 2, 2)
          <= ()
        quicksort([2, 3, 5, 8, 9], 3, 3)
          <= ()
        <= ()
      <= ()
    <= ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
    <= ()
  <= ()
-- Finished quicksort.as:
let QS : <T>((T, T) -> Int) -> QS<T> = func
let a : var Int[] = [2, 3, 5, 8, 9]
let cmpi : (Int, Int) -> Int = func
let qs : QS<Int> = QS<Int>

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 7 7 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 4))
  (func $0
    (type 1)
    (local i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.sub)
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 6)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=8)
      (set_local 2)
      (get_local 7)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 6)
    (i32.load)
    (get_local 7)
    (i32.load)
    (i32.lt_s)
    (if
      (result i32)
      (then
        (get_global 0)
        (get_global 0)
        (i32.const 4)
        (i32.add)
        (set_global 0)
        (set_local 8)
        (get_local 3)
        (i32.load)
        (set_local 11)
        (get_local 11)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 7)
        (i32.load)
        (i32.store offset=8)
        (get_local 11)
        (i32.load)
        (call_indirect (type 1))
        (set_local 2)
        (block
          (result i32)
          (get_local 2)
          (set_local 2)
          (get_local 8)
          (get_local 2)
          (i32.store)
          (i32.const 1)
        )
        (if (then) (else (unreachable)))
        (get_local 4)
        (i32.load)
        (set_local 10)
        (get_local 10)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 8)
        (i32.load)
        (i32.store offset=8)
        (get_local 10)
        (i32.load)
        (call_indirect (type 1))
        (drop)
        (get_local 4)
        (i32.load)
        (set_local 9)
        (get_local 9)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 8)
        (i32.load)
        (i32.const 1)
        (i32.add)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 7)
        (i32.load)
        (i32.store offset=8)
        (get_local 9)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
    )
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=8)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 6)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (get_local 3)
    (i32.load)
    (get_local 5)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.store)
    (i32.const 0)
    (drop)
    (get_local 3)
    (i32.load)
    (get_local 5)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (get_local 6)
    (i32.load)
    (i32.store)
    (i32.const 0)
  )
  (func $3
    (type 1)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (i32.const 0)
  )
  (func $4
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_local 0)
    (i32.load offset=12)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 8)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 6)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 7)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=8)
      (set_local 2)
      (get_local 8)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 9)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 10)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 11)
    (get_local 5)
    (i32.load)
    (set_local 15)
    (get_local 15)
    (get_local 6)
    (i32.load)
    (get_local 15)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 6)
    (i32.load)
    (get_local 7)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 9)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 10)
    (get_local 7)
    (i32.load)
    (i32.store)
    (get_local 11)
    (get_local 8)
    (i32.load)
    (i32.store)
    (loop
      (loop
        (get_local 3)
        (i32.load)
        (set_local 14)
        (get_local 14)
        (get_global 0)
        (get_global 0)
        (i32.const 8)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (get_local 10)
        (i32.load)
        (i32.const 4)
        (i32.mul)
        (i32.add)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 9)
        (i32.load)
        (i32.store offset=4)
        (get_local 14)
        (i32.load)
        (call_indirect (type 1))
        (i32.const 0)
        (i32.lt_s)
        (if
          (then
            (get_local 10)
            (get_local 10)
            (i32.load)
            (i32.const 1)
            (i32.add)
            (i32.store)
            (i32.const 0)
            (drop)
            (br 1)
          )
          (else)
        )
      )
      (i32.const 0)
      (drop)
      (loop
        (get_local 3)
        (i32.load)
        (set_local 13)
        (get_local 13)
        (get_global 0)
        (get_global 0)
        (i32.const 8)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (get_local 11)
        (i32.load)
        (i32.const 4)
        (i32.mul)
        (i32.add)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 9)
        (i32.load)
        (i32.store offset=4)
        (get_local 13)
        (i32.load)
        (call_indirect (type 1))
        (i32.const 0)
        (i32.gt_s)
        (if
          (then
            (get_local 11)
            (get_local 11)
            (i32.load)
            (i32.const 1)
            (i32.sub)
            (i32.store)
            (i32.const 0)
            (drop)
            (br 1)
          )
          (else)
        )
      )
      (i32.const 0)
      (drop)
      (get_local 10)
      (i32.load)
      (get_local 11)
      (i32.load)
      (i32.ge_s)
      (if
        (result i32)
        (then (get_local 11) (i32.load) (return))
        (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
      )
      (drop)
      (get_local 4)
      (i32.load)
      (set_local 12)
      (get_local 12)
      (get_global 0)
      (get_global 0)
      (i32.const 12)
      (i32.add)
      (set_global 0)
      (tee_local 2)
      (get_local 2)
      (get_local 6)
      (i32.load)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (get_local 10)
      (i32.load)
      (i32.store offset=4)
      (tee_local 2)
      (get_local 2)
      (get_local 11)
      (i32.load)
      (i32.store offset=8)
      (get_local 12)
      (i32.load)
      (call_indirect (type 1))
      (br 0)
    )
    (unreachable)
  )
  (func $5
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 16)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 4)
    (i32.const 0)
    (i32.add)
    (set_local 5)
    (get_local 4)
    (i32.const 4)
    (i32.add)
    (set_local 6)
    (get_local 4)
    (i32.const 8)
    (i32.add)
    (set_local 7)
    (get_local 4)
    (i32.const 12)
    (i32.add)
    (set_local 8)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 9)
    (get_local 4)
    (i32.store)
    (get_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 10)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 11)
    (get_local 10)
    (i32.store)
    (get_local 10)
    (i32.const 1)
    (i32.store)
    (get_local 10)
    (get_local 8)
    (i32.store offset=4)
    (get_local 10)
    (get_local 11)
    (i32.store offset=8)
    (get_local 10)
    (i32.store)
    (get_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 12)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 13)
    (get_local 12)
    (i32.store)
    (get_local 12)
    (i32.const 2)
    (i32.store)
    (get_local 12)
    (i32.store offset=4)
    (get_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 14)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 15)
    (get_local 14)
    (i32.store)
    (get_local 14)
    (i32.const 3)
    (i32.store)
    (get_local 14)
    (i32.store offset=8)
    (get_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 16)
    (i32.add)
    (set_global 0)
    (set_local 16)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 17)
    (get_local 16)
    (i32.store)
    (get_local 16)
    (i32.const 4)
    (i32.store)
    (get_local 16)
    (get_local 3)
    (i32.store offset=4)
    (get_local 16)
    (get_local 6)
    (i32.store offset=8)
    (get_local 16)
    (get_local 7)
    (i32.store offset=12)
    (get_local 16)
    (i32.store offset=12)
    (get_local 4)
  )
  (func $6
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 1)
    (i32.const 5)
    (i32.store)
    (get_local 3)
    (i32.const 0)
    (i32.store)
    (get_local 2)
    (i32.load)
    (set_local 8)
    (get_local 8)
    (get_local 4)
    (i32.load)
    (get_local 8)
    (i32.load)
    (call_indirect (type 1))
    (set_local 0)
    (block
      (result i32)
      (get_local 0)
      (set_local 0)
      (get_local 5)
      (get_local 0)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 20)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 8)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (i32.const 3)
    (i32.store offset=4)
    (tee_local 0)
    (get_local 0)
    (i32.const 9)
    (i32.store offset=8)
    (tee_local 0)
    (get_local 0)
    (i32.const 5)
    (i32.store offset=12)
    (tee_local 0)
    (get_local 0)
    (i32.const 2)
    (i32.store offset=16)
    (set_local 0)
    (block
      (result i32)
      (get_local 0)
      (set_local 0)
      (get_local 6)
      (get_local 0)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 5)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.load)
    (set_local 7)
    (get_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (get_local 6)
    (i32.load)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.store offset=4)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.store offset=8)
    (get_local 7)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 6)
    (i32.load)
    (i32.const 0)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 6)
    (i32.load)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 6)
    (i32.load)
    (i32.const 2)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 5)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 6)
    (i32.load)
    (i32.const 3)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 8)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 6)
    (i32.load)
    (i32.const 4)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 9)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 6)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6)
)
Interpreting the .wat:
