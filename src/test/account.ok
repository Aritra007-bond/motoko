Interpreter:
-- Checking account.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
let Account : Int -> Account
let transfer : (Account, Account, Int) -> async ()
-- Interpreting account.as:
-- Finished account.as:
let Account : Int -> Account = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP trx) (AwaitE (CallE (DotE (VarE sender) split) (VarE amount))))
    (ExpD (CallE (DotE (VarE receiver) join) (VarE trx)))
  )
)
compile_exp: (AsyncE (BlockE (ExpD (RetE (VarE balance)))))
compile_exp: (AsyncE
  (BlockE
    (ExpD (AssignE (VarE balance) (BinE (VarE balance) SubOp (VarE amount))))
    (ExpD (RetE (CallE (VarE Account) (VarE amount))))
  )
)
compile_exp: (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 8 8 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 4))
  (func $0
    (type 1)
    (local i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=8)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $1
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $3
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 3)
    (i32.load)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (i32.const 0)
    (i32.store)
    (i32.const 0)
    (drop)
    (get_local 4)
    (i32.load)
    (i32.const 16)
    (i32.add)
    (i32.load)
    (set_local 6)
    (get_local 6)
    (get_local 5)
    (i32.load)
    (get_local 6)
    (i32.load)
    (call_indirect (type 1))
  )
  (func $4
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.add)
    (i32.store)
    (i32.const 0)
  )
  (func $5
    (type 1)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $6
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 24)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 5)
    (i32.const 0)
    (i32.add)
    (set_local 6)
    (get_local 5)
    (i32.const 4)
    (i32.add)
    (set_local 7)
    (get_local 5)
    (i32.const 8)
    (i32.add)
    (set_local 8)
    (get_local 5)
    (i32.const 12)
    (i32.add)
    (set_local 9)
    (get_local 5)
    (i32.const 16)
    (i32.add)
    (set_local 10)
    (get_local 5)
    (i32.const 20)
    (i32.add)
    (set_local 11)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 12)
    (get_local 5)
    (i32.store)
    (get_local 5)
    (get_local 4)
    (i32.load)
    (i32.store)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 13)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 14)
    (get_local 13)
    (i32.store)
    (get_local 13)
    (i32.const 1)
    (i32.store)
    (get_local 13)
    (get_local 6)
    (i32.store offset=4)
    (get_local 13)
    (i32.store offset=4)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 15)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 16)
    (get_local 15)
    (i32.store)
    (get_local 15)
    (i32.const 2)
    (i32.store)
    (get_local 15)
    (get_local 3)
    (i32.store offset=4)
    (get_local 15)
    (get_local 6)
    (i32.store offset=8)
    (get_local 15)
    (i32.store offset=8)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 17)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 18)
    (get_local 17)
    (i32.store)
    (get_local 17)
    (i32.const 3)
    (i32.store)
    (get_local 17)
    (get_local 6)
    (i32.store offset=4)
    (get_local 17)
    (i32.store offset=12)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 19)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 20)
    (get_local 19)
    (i32.store)
    (get_local 19)
    (i32.const 4)
    (i32.store)
    (get_local 19)
    (get_local 6)
    (i32.store offset=4)
    (get_local 19)
    (i32.store offset=16)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 21)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 22)
    (get_local 21)
    (i32.store)
    (get_local 21)
    (i32.const 5)
    (i32.store)
    (get_local 21)
    (i32.store offset=20)
    (get_local 5)
  )
  (func $7
    (type 0)
    (local i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_local 1)
    (i32.const 6)
    (i32.store)
    (get_local 1)
    (get_local 2)
    (i32.store offset=4)
    (get_local 3)
    (i32.const 0)
    (i32.store)
    (get_local 3)
    (drop)
  )
  (start 7)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6 7)
)
Interpreting the .wat:
