Interpreter:
-- Checking account.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
let Account : Int -> Account
let transfer : (Account, Account, Int) -> async ()
-- Interpreting account.as:
-- Finished account.as:
let Account : Int -> Account = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
compile_dec: (ClassD
  Account
  Actor
  (AnnotP (VarP initialBalance) (PrimT Int))
  (balance (AnnotE (VarE initialBalance) (PrimT Int)) Var Private)
  (getBalance
    (DecE
      (FuncD
        getBalance
        (TupP)
        (AsyncT (PrimT Int))
        (AsyncE (BlockE (ExpD (RetE (VarE balance)))))
      )
    )
    Const
    Public
  )
  (split
    (DecE
      (FuncD
        split
        (AnnotP (VarP amount) (PrimT Int))
        (AsyncT (VarT Account))
        (AsyncE
          (BlockE
            (ExpD
              (AssignE (VarE balance) (BinE (VarE balance) SubOp (VarE amount)))
            )
            (ExpD (RetE (CallE (VarE Account) (VarE amount))))
          )
        )
      )
    )
    Const
    Public
  )
  (join
    (DecE
      (FuncD
        join
        (AnnotP (VarP account) (VarT Account))
        (TupT)
        (BlockE
          (LetD (VarP amount) (VarE balance))
          (ExpD (AssignE (VarE balance) (UnE PosOp (LitE (IntLit 0)))))
          (ExpD (CallE (DotE (VarE account) credit) (VarE amount)))
        )
      )
    )
    Const
    Public
  )
  (credit
    (DecE
      (FuncD
        credit
        (AnnotP (VarP amount) (PrimT Int))
        (TupT)
        (BlockE
          (ExpD
            (AssignE (VarE balance) (BinE (VarE balance) AddOp (VarE amount)))
          )
        )
      )
    )
    Const
    Private
  )
  (isCompatible
    (DecE
      (FuncD
        isCompatible
        (AnnotP (VarP account) (LikeT (VarT Account)))
        (AsyncT (PrimT Bool))
        (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
      )
    )
    Const
    Public
  )
)
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP trx) (AwaitE (CallE (DotE (VarE sender) split) (VarE amount))))
    (ExpD (CallE (DotE (VarE receiver) join) (VarE trx)))
  )
)
(module
  (type $0 (func (param i32 i32 i32) (result i32)))
  (type $1 (func))
  (table $0 2 2 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0 (type 0) (local i32) (unreachable))
  (func $1 (type 1) (local i32) (i32.const 0) (drop))
  (start 1)
  (elem 0 (offset (i32.const 0)) 0 1)
)
Interpreting the .wat:
