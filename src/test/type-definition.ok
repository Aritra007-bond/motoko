-- Checking type-definition.as:
type A/1 = (B, A/1)
type Arrow<T, U> = T -> U
type B = (A/1, B)
type C <: {}
type Compose<T, U, V> = (T -> U) -> (U -> V) -> T -> V
type D <: {r : <C>C/0 -> C}
type E<Y> <: {r : <Y.1>Y -> Y.1}
type Id = <T>T -> T
type IntT = Int
type Seq<A> = (A, Seq<A>?)
type T/2<X> = {f : <C>X -> C}
type U/2<X> = {f : <Y>X -> Y}
let C : () -> C
let D : T/2<C> -> D
let E : <Y>U/2<Y> -> E<Y>
-- Interpreting type-definition.as:
-- Finished type-definition.as:
let C : () -> C = func
let D : T/2<C> -> D = func
let E : <Y>U/2<Y> -> E<Y> = func

