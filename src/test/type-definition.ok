Interpreter:
-- Checking type-definition.as:
type A/1 = (B, A/1)
type Arrow<T, U> = T -> U
type B = (A/1, B)
type C <: {}
type Compose<T, U, V> = (T -> U) -> (U -> V) -> T -> V
type D <: {r : <C>C/0 -> C}
type E<Y> <: {r : <Y.1>Y -> Y.1}
type Id = <T>T -> T
type IntT = Int
type Seq<A> = (A, Seq<A>?)
type T/2<X> = {f : <C>X -> C}
type U/2<X> = {f : <Y>X -> Y}
let C : () -> C
let D : T/2<C> -> D
let E : <Y>U/2<Y> -> E<Y>
-- Interpreting type-definition.as:
-- Finished type-definition.as:
let C : () -> C = func
let D : T/2<C> -> D = func
let E : <Y>U/2<Y> -> E<Y> = func

Compiler:
compile_dec: (ClassD C Object (TupP))
compile_dec: (ClassD
  D
  Object
  (AnnotP (VarP x) (VarT T (VarT C)))
  (r (DotE (VarE x) f) Const Public)
)
compile_dec: (ClassD
  E
  (Y AnyT)
  Object
  (AnnotP (VarP x) (VarT U (VarT Y)))
  (r (DotE (VarE x) f) Const Public)
)
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 1 1 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 0))
  (func $0 (type 0) (local i32) (drop))
  (start 0)
  (elem 0 (offset (i32.const 0)) 0)
)
Interpreting the .wat:
type-definition.wat:7.33-7.39: invalid module: type mismatch: operator requires [_] but stack has []
