Interpreter:
-- Checking type-definition.as:
type A/1 = (B, A/1)
type Arrow<T, U> = T -> U
type B = (A/1, B)
type C <: {}
type Compose<T, U, V> = (T -> U) -> (U -> V) -> T -> V
type D <: {r : <C>C/0 -> C}
type E<Y> <: {r : <Y.1>Y -> Y.1}
type Id = <T>T -> T
type IntT = Int
type Seq<A> = (A, Seq<A>?)
type T/2<X> = {f : <C>X -> C}
type U/2<X> = {f : <Y>X -> Y}
let C : () -> C
let D : T/2<C> -> D
let E : <Y>U/2<Y> -> E<Y>
-- Interpreting type-definition.as:
-- Finished type-definition.as:
let C : () -> C = func
let D : T/2<C> -> D = func
let E : <Y>U/2<Y> -> E<Y> = func

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 4 4 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 4))
  (func $0
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 4)
    (i32.const 0)
    (i32.add)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 4)
    (i32.store)
    (get_local 4)
    (get_local 3)
    (i32.load)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.store)
    (get_local 4)
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 4)
    (i32.const 0)
    (i32.add)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 4)
    (i32.store)
    (get_local 4)
    (get_local 3)
    (i32.load)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.store)
    (get_local 4)
  )
  (func $2
    (type 1)
    (local i32 i32 i32)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_local 3)
  )
  (func $3
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 5)
    (i32.store)
    (get_local 1)
    (i32.const 2)
    (i32.store)
    (get_local 3)
    (i32.const 1)
    (i32.store)
    (get_local 5)
    (i32.const 0)
    (i32.store)
    (get_local 5)
    (drop)
  )
  (start 3)
  (elem 0 (offset (i32.const 0)) 0 1 2 3)
)
Interpreting the .wat:
