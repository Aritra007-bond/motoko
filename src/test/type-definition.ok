Interpreter:
-- Checking type-definition.as:
type A/1 = (B, A/1)
type Arrow<T, U> = T -> U
type B = (A/1, B)
type C <: {}
type Compose<T, U, V> = (T -> U) -> (U -> V) -> T -> V
type D <: {r : <C>C/0 -> C}
type E<Y> <: {r : <Y.1>Y -> Y.1}
type Id = <T>T -> T
type IntT = Int
type Seq<A> = (A, Seq<A>?)
type T/2<X> = {f : <C>X -> C}
type U/2<X> = {f : <Y>X -> Y}
let C : () -> C
let D : T/2<C> -> D
let E : <Y>U/2<Y> -> E<Y>
-- Interpreting type-definition.as:
-- Finished type-definition.as:
let C : () -> C = func
let D : T/2<C> -> D = func
let E : <Y>U/2<Y> -> E<Y> = func

Compiler:
compile_dec: (TypD IntT (PrimT Int))
compile_dec: (TypD Arrow (T AnyT) (U AnyT) (FuncT (VarT T) (VarT U)))
compile_dec: (TypD
  Compose
  (T AnyT)
  (U AnyT)
  (V AnyT)
  (FuncT
    (FuncT (VarT T) (VarT U))
    (FuncT (FuncT (VarT U) (VarT V)) (FuncT (VarT T) (VarT V)))
  )
)
compile_dec: (TypD Id (FuncT (T AnyT) (VarT T) (VarT T)))
compile_dec: (TypD Seq (A AnyT) (TupT (VarT A) (OptT (VarT Seq (VarT A)))))
compile_dec: (TypD A (TupT (VarT B) (VarT A)))
compile_dec: (TypD B (TupT (VarT A) (VarT B)))
compile_dec: (ClassD C Object (TupP))
compile_dec: (TypD T (X AnyT) (ObjT Object (f (FuncT (C AnyT) (VarT X) (VarT C)) Const)))
compile_dec: (ClassD
  D
  Object
  (AnnotP (VarP x) (VarT T (VarT C)))
  (r (DotE (VarE x) f) Const Public)
)
compile_dec: (TypD U (X AnyT) (ObjT Object (f (FuncT (Y AnyT) (VarT X) (VarT Y)) Const)))
compile_dec: (ClassD
  E
  (Y AnyT)
  Object
  (AnnotP (VarP x) (VarT U (VarT Y)))
  (r (DotE (VarE x) f) Const Public)
)
(module (type $0 (func)) (func $0 (type 0)) (start 0))
Interpreting the .wat:
