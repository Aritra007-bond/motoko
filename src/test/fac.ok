Interpreter:
-- Checking fac.as:
let fac : Nat -> Nat
-- Interpreting fac.as:
fac(5)
  fac(4)
    fac(3)
      fac(2)
        fac(1)
          fac(0)
            <= 1
          <= 1
        <= 2
      <= 6
    <= 24
  <= 120
-- Finished fac.as:
let fac : Nat -> Nat = func

Compiler:
(module
  (type $0 (func (param i32) (result i32)))
  (type $1 (func))
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 0)
    (local i32)
    (get_local 0)
    (i32.const 0)
    (i32.eq)
    (if (result i32) (then (i32.const 1) (return)) (else (i32.const 0)))
    (drop)
    (get_local 0)
    (get_local 0)
    (i32.const 1)
    (i32.sub)
    (call 0)
    (i32.mul)
  )
  (func $1
    (type 1)
    (local i32)
    (i32.const 5)
    (call 0)
    (i32.const 120)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 1)
)
Interpreting the .wat:
