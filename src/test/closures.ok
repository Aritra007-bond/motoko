Interpreter:
-- Checking closures.as:
let add1 : Nat -> Nat
var answer : Nat
let answer2 : Nat
var answer3 : Nat
var answers : Nat[]
let fs : (Nat -> Nat)[]
let test_answer : Nat -> ()
let test_answer2 : () -> ()
let test_answer3 : () -> ()
let test_answers : Nat -> ()
-- Interpreting closures.as:
add1(1)
  <= 2
add1(2)
  <= 3
add1(3)
  <= 4
test_answer(42)
  <= ()
test_answers(44)
  <= ()
test_answer2()
  <= ()
test_answer3()
  <= ()
-- Finished closures.as:
let add1 : Nat -> Nat = func
var answer : Nat = 42
let answer2 : Nat = 42
var answer3 : Nat = 51
var answers : Nat[] = [43, 44]
let fs : (Nat -> Nat)[] = [func, func, func]
let test_answer : Nat -> () = func
let test_answer2 : () -> () = func
let test_answer3 : () -> () = func
let test_answers : Nat -> () = func

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 6 6 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (get_local 2) (drop))
    (get_local 3)
    (i32.load)
    (i32.const 51)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $1
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (get_local 2) (drop))
    (get_local 3)
    (i32.load)
    (i32.const 42)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $2
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block (get_local 2) (set_local 2) (get_local 4) (get_local 2) (i32.store))
    (get_local 3)
    (i32.load)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $3
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block (get_local 2) (set_local 2) (get_local 4) (get_local 2) (i32.store))
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $4
    (type 1)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (get_local 2) (set_local 2) (get_local 3) (get_local 2) (i32.store))
    (get_local 3)
    (i32.load)
    (i32.const 1)
    (i32.add)
  )
  (func $5
    (type 0)
    (local
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
    )
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 5)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 8)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 9)
    (get_local 8)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 10)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 11)
    (get_local 10)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 12)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 13)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 14)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 15)
    (get_local 14)
    (i32.store)
    (get_local 1)
    (i32.const 4)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (get_local 2)
    (i32.load)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (get_local 2)
    (i32.load)
    (i32.store offset=4)
    (tee_local 0)
    (get_local 0)
    (get_local 2)
    (i32.load)
    (i32.store offset=8)
    (set_local 0)
    (block (get_local 0) (set_local 0) (get_local 3) (get_local 0) (i32.store))
    (get_local 3)
    (i32.load)
    (i32.const 0)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 22)
    (get_local 22)
    (get_local 3)
    (i32.load)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 21)
    (get_local 21)
    (get_local 3)
    (i32.load)
    (i32.const 2)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 20)
    (get_local 20)
    (i32.const 1)
    (get_local 20)
    (i32.load)
    (call_indirect (type 1))
    (get_local 21)
    (i32.load)
    (call_indirect (type 1))
    (get_local 22)
    (i32.load)
    (call_indirect (type 1))
    (i32.const 4)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 4)
    (i32.const 42)
    (i32.store)
    (get_local 5)
    (i32.const 3)
    (i32.store)
    (get_local 5)
    (get_local 4)
    (i32.store offset=4)
    (get_local 6)
    (i32.load)
    (set_local 19)
    (get_local 19)
    (i32.const 42)
    (get_local 19)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 43)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (i32.const 44)
    (i32.store offset=4)
    (i32.store)
    (get_local 8)
    (i32.const 2)
    (i32.store)
    (get_local 8)
    (get_local 7)
    (i32.store offset=4)
    (get_local 9)
    (i32.load)
    (set_local 18)
    (get_local 18)
    (i32.const 44)
    (get_local 18)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 10)
    (i32.const 1)
    (i32.store)
    (get_local 10)
    (get_local 12)
    (i32.store offset=4)
    (i32.const 42)
    (set_local 0)
    (block (get_local 0) (set_local 0) (get_local 12) (get_local 0) (i32.store))
    (get_local 11)
    (i32.load)
    (set_local 17)
    (get_local 17)
    (get_global 0)
    (get_global 0)
    (i32.const 0)
    (i32.add)
    (set_global 0)
    (get_local 17)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 13)
    (i32.const 50)
    (i32.store)
    (get_local 14)
    (i32.const 0)
    (i32.store)
    (get_local 14)
    (get_local 13)
    (i32.store offset=4)
    (get_local 13)
    (i32.const 51)
    (i32.store)
    (i32.const 0)
    (drop)
    (get_local 15)
    (i32.load)
    (set_local 16)
    (get_local 16)
    (get_global 0)
    (get_global 0)
    (i32.const 0)
    (i32.add)
    (set_global 0)
    (get_local 16)
    (i32.load)
    (call_indirect (type 1))
    (drop)
  )
  (start 5)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5)
)
Interpreting the .wat:
