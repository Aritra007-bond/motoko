Interpreter:
-- Checking closures.as:
let add1 : Nat -> Nat
let fs : (Nat -> Nat)[]
-- Interpreting closures.as:
add1(1)
  <= 2
add1(2)
  <= 3
add1(3)
  <= 4
-- Finished closures.as:
let add1 : Nat -> Nat = func
let fs : (Nat -> Nat)[] = [func, func, func]

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32) (result i32)))
  (table $0 2 2 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32)
    (get_local 0)
    (set_local 2)
    (get_local 2)
    (i32.const 1)
    (i32.add)
  )
  (func $1
    (type 0)
    (local i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.store align=1)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 48)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 8)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (set_local 2)
    (get_local 2)
    (i32.const 0)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (i32.load align=1)
    (get_local 2)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (i32.load align=1)
    (get_local 2)
    (i32.const 2)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (i32.load align=1)
    (i32.const 1)
    (set_local 0)
    (set_local 3)
    (get_local 0)
    (get_local 3)
    (call_indirect (type 1))
    (set_local 0)
    (set_local 4)
    (get_local 0)
    (get_local 4)
    (call_indirect (type 1))
    (set_local 0)
    (set_local 5)
    (get_local 0)
    (get_local 5)
    (call_indirect (type 1))
    (i32.const 4)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 1)
  (elem 0 (offset (i32.const 0)) 0 1)
)
Interpreting the .wat:
