Interpreter:
-- Checking closures.as:
let add1 : Nat -> Nat
var answer : Nat
var answers : Nat[]
let fs : (Nat -> Nat)[]
let test_answer : Nat -> ()
let test_answers : Nat -> ()
-- Interpreting closures.as:
add1(1)
  <= 2
add1(2)
  <= 3
add1(3)
  <= 4
test_answer(42)
  <= ()
test_answers(44)
  <= ()
-- Finished closures.as:
let add1 : Nat -> Nat = func

closures.as:15.52-15.53: fatal error, Invalid_argument("as_nat")

Raised at file "value.ml", line 132, characters 22-42
Called from file "value.ml", line 183, characters 34-44
Called from file "main.ml", line 37, characters 18-45
Called from file "map.ml", line 270, characters 20-25
Called from file "main.ml", line 75, characters 6-42

Last context:
add1 = func
answer = 42
answers = [43, 44]
fs = [func, func, func]
test_answer = func
test_answers = func
x = 44

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 4 4 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 3)
    (get_local 1)
    (set_local 4)
    (get_local 3)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (get_local 4)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $1
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 3)
    (get_local 1)
    (set_local 4)
    (get_local 3)
    (get_local 4)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
  )
  (func $2
    (type 1)
    (local i32 i32)
    (get_local 1)
    (set_local 3)
    (get_local 3)
    (i32.const 1)
    (i32.add)
  )
  (func $3
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 1)
    (i32.const 2)
    (i32.store align=1)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 8)
    (i32.add)
    (get_local 1)
    (i32.store align=1)
    (set_local 2)
    (get_local 2)
    (i32.const 0)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (set_local 11)
    (get_local 11)
    (get_local 2)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (set_local 10)
    (get_local 10)
    (get_local 2)
    (i32.const 2)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load align=1)
    (set_local 9)
    (get_local 9)
    (i32.const 1)
    (get_local 9)
    (i32.load align=1)
    (call_indirect (type 1))
    (get_local 10)
    (i32.load align=1)
    (call_indirect (type 1))
    (get_local 11)
    (i32.load align=1)
    (call_indirect (type 1))
    (i32.const 4)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (i32.const 42)
    (set_local 3)
    (get_local 4)
    (i32.const 1)
    (i32.store align=1)
    (get_local 4)
    (i32.const 4)
    (i32.add)
    (get_local 3)
    (i32.store align=1)
    (get_local 4)
    (set_local 8)
    (get_local 8)
    (i32.const 42)
    (get_local 8)
    (i32.load align=1)
    (call_indirect (type 1))
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.const 43)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.const 44)
    (i32.store align=1)
    (set_local 5)
    (get_local 6)
    (i32.const 0)
    (i32.store align=1)
    (get_local 6)
    (i32.const 4)
    (i32.add)
    (get_local 5)
    (i32.store align=1)
    (get_local 6)
    (set_local 7)
    (get_local 7)
    (i32.const 44)
    (get_local 7)
    (i32.load align=1)
    (call_indirect (type 1))
    (drop)
  )
  (start 3)
  (elem 0 (offset (i32.const 0)) 0 1 2 3)
)
Interpreting the .wat:
