Interpreter:
-- Checking numeric-ops.as:
let testFloat : (Float, Float) -> ()
let testInt : (Int, Int) -> ()
let testNat : (Nat, Nat) -> ()
let testWord16 : (Word16, Word16) -> ()
let testWord32 : (Word32, Word32) -> ()
let testWord64 : (Word64, Word64) -> ()
let testWord8 : (Word8, Word8) -> ()
-- Interpreting numeric-ops.as:
-- Finished numeric-ops.as:
let testFloat : (Float, Float) -> () = func
let testInt : (Int, Int) -> () = func
let testNat : (Nat, Nat) -> () = func
let testWord16 : (Word16, Word16) -> () = func
let testWord32 : (Word32, Word32) -> () = func
let testWord64 : (Word64, Word64) -> () = func
let testWord8 : (Word8, Word8) -> () = func

Compiler:
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: DivOp
compile_binop: DivOp
compile_unop: PosOp
compile_unop: PosOp
compile_binop: ModOp
compile_binop: ModOp
compile_binop: DivOp
compile_binop: DivOp
compile_unop: PosOp
compile_unop: PosOp
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 8 8 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 6)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 14)
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 6)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 14)
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 6)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 14)
  )
  (func $3
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 6)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 14)
  )
  (func $4
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 6)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 14)
  )
  (func $5
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (unreachable)
    (set_local 5)
    (get_local 3)
    (unreachable)
    (set_local 6)
    (get_local 3)
    (set_local 2)
    (i32.const 0)
    (get_local 2)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (set_local 2)
    (i32.const 0)
    (get_local 2)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 14)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 15)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 16)
  )
  (func $6
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (unreachable)
    (set_local 5)
    (get_local 3)
    (unreachable)
    (set_local 6)
    (get_local 3)
    (set_local 2)
    (i32.const 0)
    (get_local 2)
    (i32.sub)
    (set_local 7)
    (get_local 3)
    (set_local 2)
    (i32.const 0)
    (get_local 2)
    (i32.sub)
    (set_local 8)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 9)
    (get_local 3)
    (get_local 4)
    (i32.add)
    (set_local 10)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 11)
    (get_local 3)
    (get_local 4)
    (i32.sub)
    (set_local 12)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 13)
    (get_local 3)
    (get_local 4)
    (i32.mul)
    (set_local 14)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 15)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 16)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 17)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (tee_local 2)
    (get_local 2)
    (set_local 18)
  )
  (func $7
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 2)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_local 1)
    (i32.const 6)
    (i32.store)
    (get_local 2)
    (i32.const 5)
    (i32.store)
    (get_local 3)
    (i32.const 4)
    (i32.store)
    (get_local 4)
    (i32.const 3)
    (i32.store)
    (get_local 5)
    (i32.const 2)
    (i32.store)
    (get_local 6)
    (i32.const 1)
    (i32.store)
    (get_local 7)
    (i32.const 0)
    (i32.store)
    (get_local 7)
    (drop)
  )
  (start 7)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6 7)
)
Interpreting the .wat:
