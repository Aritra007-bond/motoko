Interpreter:
-- Checking bank-example.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
type Bank <: actor {getIssuer : () -> async Issuer; getReserve : () -> async Account}
type Issuer <: actor {hasIssued : (like Account) -> async Bool}
let Account : Int -> Account
let Bank : Int -> Bank
let Issuer : () -> Issuer
let b : Bank
let main : async (Account, Account)
let show : (Text, Account) -> ()
let test : () -> async (Account, Account)
let transfer : (Account, Account, Int) -> async ()
-- Interpreting bank-example.as:
Bank(100)
  Issuer()
    <= {hasIssued = func}
  Account(100)
    <= {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
  <= {getIssuer = func; getReserve = func; issuer = {hasIssued = func}; reserve = {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}}
test()
  -> async bank-example.as:55.40-67.2
  <= async _ #0
<- async bank-example.as:55.40-67.2
  -> message getReserve()
  => await bank-example.as:56.17-56.37
<- message getReserve()
  getReserve()
    -> async bank-example.as:5.32-6.21
    <= async _ #0
<- async bank-example.as:5.32-6.21
<- await bank-example.as:56.17-56.37({balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bank-example.as:57.12-57.35
<- message split(10)
  split(10)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:57.12-57.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bank-example.as:58.12-58.35
<- message split(10)
  split(10)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:58.12-58.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  transfer({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, 5)
    -> async bank-example.as:45.91-48.2
    <= async _ #0
  => await bank-example.as:62.3-62.28
<- async bank-example.as:45.91-48.2
  -> message split(5)
  => await bank-example.as:46.13-46.39
<- message split(5)
  split(5)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(5)
    <= {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:46.13-46.39({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  <= ()
<- message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    credit(5)
      <= ()
    <= ()
<- await bank-example.as:62.3-62.28()
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  <= ({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
-- Finished bank-example.as:
let Account : Int -> Account = func
let Bank : Int -> Bank = func
let Issuer : () -> Issuer = func
let b : Bank = Bank(...)
let main : async (Account, Account) = async (Account(...), Account(...))
let show : (Text, Account) -> () = func
let test : () -> async (Account, Account) = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP reserve) (AwaitE (CallE (DotE (VarE b) getReserve) (TupE))))
    (LetD
      (VarP a1)
      (AwaitE (CallE (DotE (VarE reserve) split) (LitE (IntLit 10))))
    )
    (LetD
      (VarP a2)
      (AwaitE (CallE (DotE (VarE reserve) split) (LitE (IntLit 10))))
    )
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit reserve)) (VarE reserve))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a1)) (VarE a1))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a2)) (VarE a2))))
    (ExpD
      (AwaitE
        (CallE (VarE transfer) (TupE (VarE a1) (VarE a2) (LitE (IntLit 5))))
      )
    )
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit reserve)) (VarE reserve))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a1)) (VarE a1))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a2)) (VarE a2))))
    (ExpD (TupE (VarE a1) (VarE a2)))
  )
)
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP trx) (AwaitE (CallE (DotE (VarE sender) split) (VarE amount))))
    (ExpD (CallE (DotE (VarE trx) join) (VarE receiver)))
  )
)
compile_exp: (AsyncE (BlockE (ExpD (RetE (VarE balance)))))
compile_exp: (AsyncE
  (BlockE
    (ExpD (AssignE (VarE balance) (BinE (VarE balance) SubOp (VarE amount))))
    (ExpD (RetE (CallE (VarE Account) (VarE amount))))
  )
)
compile_exp: (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
compile_exp: (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
compile_exp: (AsyncE (BlockE (ExpD (RetE (VarE issuer)))))
compile_exp: (AsyncE (BlockE (ExpD (RetE (VarE reserve)))))
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 15 15 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 4))
  (func $0
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_local 0)
    (i32.load offset=12)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $1
    (type 1)
    (local i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (i32.const 0)
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (tee_local 2)
      (get_local 2)
      (i32.load)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=4)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (i32.load offset=8)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (drop)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $3
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $4
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $5
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 3)
    (i32.load)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (i32.const 0)
    (i32.store)
    (i32.const 0)
    (drop)
    (get_local 4)
    (i32.load)
    (i32.const 16)
    (i32.add)
    (i32.load)
    (set_local 6)
    (get_local 6)
    (get_local 5)
    (i32.load)
    (get_local 6)
    (i32.load)
    (call_indirect (type 1))
  )
  (func $6
    (type 1)
    (local i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 3)
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.add)
    (i32.store)
    (i32.const 0)
  )
  (func $7
    (type 1)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $8
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 4)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 24)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 5)
    (i32.const 0)
    (i32.add)
    (set_local 6)
    (get_local 5)
    (i32.const 4)
    (i32.add)
    (set_local 7)
    (get_local 5)
    (i32.const 8)
    (i32.add)
    (set_local 8)
    (get_local 5)
    (i32.const 12)
    (i32.add)
    (set_local 9)
    (get_local 5)
    (i32.const 16)
    (i32.add)
    (set_local 10)
    (get_local 5)
    (i32.const 20)
    (i32.add)
    (set_local 11)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 12)
    (get_local 5)
    (i32.store)
    (get_local 5)
    (get_local 4)
    (i32.load)
    (i32.store)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 13)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 14)
    (get_local 13)
    (i32.store)
    (get_local 13)
    (i32.const 3)
    (i32.store)
    (get_local 13)
    (get_local 6)
    (i32.store offset=4)
    (get_local 13)
    (i32.store offset=4)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 15)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 16)
    (get_local 15)
    (i32.store)
    (get_local 15)
    (i32.const 4)
    (i32.store)
    (get_local 15)
    (get_local 3)
    (i32.store offset=4)
    (get_local 15)
    (get_local 6)
    (i32.store offset=8)
    (get_local 15)
    (i32.store offset=8)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 17)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 18)
    (get_local 17)
    (i32.store)
    (get_local 17)
    (i32.const 5)
    (i32.store)
    (get_local 17)
    (get_local 6)
    (i32.store offset=4)
    (get_local 17)
    (i32.store offset=12)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 19)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 20)
    (get_local 19)
    (i32.store)
    (get_local 19)
    (i32.const 6)
    (i32.store)
    (get_local 19)
    (get_local 6)
    (i32.store offset=4)
    (get_local 19)
    (i32.store offset=16)
    (get_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 21)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 22)
    (get_local 21)
    (i32.store)
    (get_local 21)
    (i32.const 7)
    (i32.store)
    (get_local 21)
    (i32.store offset=20)
    (get_local 5)
  )
  (func $9
    (type 1)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 3)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $10
    (type 1)
    (local i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 28)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 3)
    (i32.const 24)
    (i32.add)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 5)
    (get_local 3)
    (i32.store)
    (get_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 7)
    (get_local 6)
    (i32.store)
    (get_local 6)
    (i32.const 9)
    (i32.store)
    (get_local 6)
    (i32.store offset=24)
    (get_local 3)
  )
  (func $11
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $12
    (type 1)
    (local i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (set_local 2)
    (block (result i32) (get_local 2) (drop) (i32.const 1))
    (if (then) (else (unreachable)))
    (unreachable)
  )
  (func $13
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (block
      (result i32)
      (get_local 2)
      (set_local 2)
      (get_local 5)
      (get_local 2)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_global 0)
    (get_global 0)
    (i32.const 44)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 6)
    (i32.const 28)
    (i32.add)
    (set_local 7)
    (get_local 6)
    (i32.const 32)
    (i32.add)
    (set_local 8)
    (get_local 6)
    (i32.const 36)
    (i32.add)
    (set_local 9)
    (get_local 6)
    (i32.const 40)
    (i32.add)
    (set_local 10)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 11)
    (get_local 6)
    (i32.store)
    (get_local 6)
    (get_local 4)
    (i32.load)
    (set_local 12)
    (get_local 12)
    (get_global 0)
    (get_global 0)
    (i32.const 0)
    (i32.add)
    (set_global 0)
    (get_local 12)
    (i32.load)
    (call_indirect (type 1))
    (i32.store offset=28)
    (get_local 6)
    (get_local 3)
    (i32.load)
    (set_local 13)
    (get_local 13)
    (get_local 5)
    (i32.load)
    (get_local 13)
    (i32.load)
    (call_indirect (type 1))
    (i32.store offset=32)
    (get_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 14)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 15)
    (get_local 14)
    (i32.store)
    (get_local 14)
    (i32.const 11)
    (i32.store)
    (get_local 14)
    (get_local 7)
    (i32.store offset=4)
    (get_local 14)
    (i32.store offset=36)
    (get_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 16)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 17)
    (get_local 16)
    (i32.store)
    (get_local 16)
    (i32.const 12)
    (i32.store)
    (get_local 16)
    (get_local 8)
    (i32.store offset=4)
    (get_local 16)
    (i32.store offset=40)
    (get_local 6)
  )
  (func $14
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 5)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 8)
    (get_local 7)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 9)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 10)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 11)
    (get_local 10)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 16)
    (i32.add)
    (set_global 0)
    (set_local 12)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 13)
    (get_local 12)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 14)
    (get_local 1)
    (i32.const 13)
    (i32.store)
    (get_local 1)
    (get_local 6)
    (i32.store offset=4)
    (get_local 1)
    (get_local 4)
    (i32.store offset=8)
    (get_local 3)
    (i32.const 10)
    (i32.store)
    (get_local 5)
    (i32.const 8)
    (i32.store)
    (get_local 5)
    (get_local 6)
    (i32.store offset=4)
    (get_local 7)
    (i32.const 2)
    (i32.store)
    (get_local 2)
    (i32.load)
    (set_local 16)
    (get_local 16)
    (i32.const 100)
    (get_local 16)
    (i32.load)
    (call_indirect (type 1))
    (set_local 0)
    (block
      (result i32)
      (get_local 0)
      (set_local 0)
      (get_local 9)
      (get_local 0)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (get_local 10)
    (i32.const 1)
    (i32.store)
    (get_local 12)
    (i32.const 0)
    (i32.store)
    (get_local 12)
    (get_local 9)
    (i32.store offset=4)
    (get_local 12)
    (get_local 11)
    (i32.store offset=8)
    (get_local 12)
    (get_local 8)
    (i32.store offset=12)
    (get_local 13)
    (i32.load)
    (set_local 15)
    (get_local 15)
    (get_global 0)
    (get_global 0)
    (i32.const 0)
    (i32.add)
    (set_global 0)
    (get_local 15)
    (i32.load)
    (call_indirect (type 1))
    (tee_local 0)
    (get_local 0)
    (set_local 0)
    (block
      (result i32)
      (get_local 0)
      (set_local 0)
      (get_local 14)
      (get_local 0)
      (i32.store)
      (i32.const 1)
    )
    (if (then) (else (unreachable)))
    (drop)
  )
  (start 14)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14)
)
Interpreting the .wat:
bank-example.wat:23.5-23.18: runtime trap: unreachable executed
