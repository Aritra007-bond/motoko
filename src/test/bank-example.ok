Interpreter:
-- Checking bank-example.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
type Bank <: actor {getIssuer : () -> async Issuer; getReserve : () -> async Account}
type Issuer <: actor {hasIssued : (like Account) -> async Bool}
let Account : Int -> Account
let Bank : Int -> Bank
let Issuer : () -> Issuer
let b : Bank
let main : async (Account, Account)
let show : (Text, Account) -> ()
let test : () -> async (Account, Account)
let transfer : (Account, Account, Int) -> async ()
-- Interpreting bank-example.as:
Bank(100)
  Issuer()
    <= {hasIssued = func}
  Account(100)
    <= {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
  <= {getIssuer = func; getReserve = func; issuer = {hasIssued = func}; reserve = {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}}
test()
  -> async bank-example.as:55.40-67.2
  <= async _ #0
<- async bank-example.as:55.40-67.2
  -> message getReserve()
  => await bank-example.as:56.17-56.37
<- message getReserve()
  getReserve()
    -> async bank-example.as:5.32-6.21
    <= async _ #0
<- async bank-example.as:5.32-6.21
<- await bank-example.as:56.17-56.37({balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bank-example.as:57.12-57.35
<- message split(10)
  split(10)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:57.12-57.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bank-example.as:58.12-58.35
<- message split(10)
  split(10)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:58.12-58.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  transfer({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, 5)
    -> async bank-example.as:45.91-48.2
    <= async _ #0
  => await bank-example.as:62.3-62.28
<- async bank-example.as:45.91-48.2
  -> message split(5)
  => await bank-example.as:46.13-46.39
<- message split(5)
  split(5)
    -> async bank-example.as:22.39-25.4
    <= async _ #0
<- async bank-example.as:22.39-25.4
  Account(5)
    <= {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bank-example.as:46.13-46.39({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  <= ()
<- message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    credit(5)
      <= ()
    <= ()
<- await bank-example.as:62.3-62.28()
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  <= ({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
-- Finished bank-example.as:
let Account : Int -> Account = func
let Bank : Int -> Bank = func
let Issuer : () -> Issuer = func
let b : Bank = Bank
let main : async (Account, Account) = async (Account, Account)
let show : (Text, Account) -> () = func
let test : () -> async (Account, Account) = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
compile_dec: (ClassD
  Bank
  Actor
  (AnnotP (VarP supply) (PrimT Int))
  (issuer (CallE (VarE Issuer) (TupE)) Const Private)
  (reserve (CallE (VarE Account) (VarE supply)) Const Private)
  (getIssuer
    (DecE
      (FuncD
        getIssuer
        (TupP)
        (AsyncT (VarT Issuer))
        (AsyncE (BlockE (ExpD (RetE (VarE issuer)))))
      )
    )
    Const
    Public
  )
  (getReserve
    (DecE
      (FuncD
        getReserve
        (TupP)
        (AsyncT (VarT Account))
        (AsyncE (BlockE (ExpD (RetE (VarE reserve)))))
      )
    )
    Const
    Public
  )
)
compile_dec: (ClassD
  Issuer
  Actor
  (TupP)
  (hasIssued
    (DecE
      (FuncD
        hasIssued
        (AnnotP (VarP account) (LikeT (VarT Account)))
        (AsyncT (PrimT Bool))
        (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
      )
    )
    Const
    Public
  )
)
compile_dec: (ClassD
  Account
  Actor
  (AnnotP (VarP initialBalance) (PrimT Int))
  (balance (AnnotE (VarE initialBalance) (PrimT Int)) Var Private)
  (getBalance
    (DecE
      (FuncD
        getBalance
        (TupP)
        (AsyncT (PrimT Int))
        (AsyncE (BlockE (ExpD (RetE (VarE balance)))))
      )
    )
    Const
    Public
  )
  (split
    (DecE
      (FuncD
        split
        (AnnotP (VarP amount) (PrimT Int))
        (AsyncT (VarT Account))
        (AsyncE
          (BlockE
            (ExpD
              (AssignE (VarE balance) (BinE (VarE balance) SubOp (VarE amount)))
            )
            (ExpD (RetE (CallE (VarE Account) (VarE amount))))
          )
        )
      )
    )
    Const
    Public
  )
  (join
    (DecE
      (FuncD
        join
        (AnnotP (VarP account) (VarT Account))
        (TupT)
        (BlockE
          (LetD (VarP amount) (VarE balance))
          (ExpD (AssignE (VarE balance) (LitE (IntLit 0))))
          (ExpD (CallE (DotE (VarE account) credit) (VarE amount)))
        )
      )
    )
    Const
    Public
  )
  (credit
    (DecE
      (FuncD
        credit
        (AnnotP (VarP amount) (PrimT Int))
        (TupT)
        (BlockE
          (ExpD
            (AssignE (VarE balance) (BinE (VarE balance) AddOp (VarE amount)))
          )
        )
      )
    )
    Const
    Private
  )
  (isCompatible
    (DecE
      (FuncD
        isCompatible
        (AnnotP (VarP account) (LikeT (VarT Account)))
        (AsyncT (PrimT Bool))
        (AsyncE (BlockE (ExpD (RetE (IsE (VarE account) (VarT Account))))))
      )
    )
    Const
    Public
  )
)
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP reserve) (AwaitE (CallE (DotE (VarE b) getReserve) (TupE))))
    (LetD
      (VarP a1)
      (AwaitE (CallE (DotE (VarE reserve) split) (LitE (IntLit 10))))
    )
    (LetD
      (VarP a2)
      (AwaitE (CallE (DotE (VarE reserve) split) (LitE (IntLit 10))))
    )
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit reserve)) (VarE reserve))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a1)) (VarE a1))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a2)) (VarE a2))))
    (ExpD
      (AwaitE
        (CallE (VarE transfer) (TupE (VarE a1) (VarE a2) (LitE (IntLit 5))))
      )
    )
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit reserve)) (VarE reserve))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a1)) (VarE a1))))
    (ExpD (CallE (VarE show) (TupE (LitE (TextLit a2)) (VarE a2))))
    (ExpD (TupE (VarE a1) (VarE a2)))
  )
)
Could not find Bank
compile_exp: (AsyncE
  (BlockE
    (LetD (VarP trx) (AwaitE (CallE (DotE (VarE sender) split) (VarE amount))))
    (ExpD (CallE (DotE (VarE trx) join) (VarE receiver)))
  )
)
(module
  (type $0 (func (result i32)))
  (type $1 (func (result i32)))
  (type $2 (func (param i32 i32) (result i32)))
  (type $3 (func (param i32) (result i32)))
  (type $4 (func (param i32 i32 i32) (result i32)))
  (type $5 (func))
  (table $0 4 4 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0 (type 1) (local i32) (unreachable))
  (func $1 (type 2) (local i32) (i32.const 0))
  (func $2 (type 4) (local i32) (unreachable))
  (func $3
    (type 5)
    (local i32 i32 i32 i32 i32 i32)
    (i32.const 2)
    (set_local 1)
    (i32.const 100)
    (unreachable)
    (call_indirect (type 3))
    (set_local 2)
    (i32.const 1)
    (set_local 3)
    (i32.const 0)
    (set_local 4)
    (get_local 4)
    (call_indirect (type 0))
    (tee_local 0)
    (get_local 0)
    (set_local 5)
    (drop)
  )
  (start 3)
  (elem 0 (offset (i32.const 0)) 0 1 2 3)
)
Interpreting the .wat:
bank-example.wat:20.5-20.18: runtime trap: unreachable executed
