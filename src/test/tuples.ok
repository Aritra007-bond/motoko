Interpreter:
-- Checking tuples.as:
let a : Nat
let nested1 : (Nat, (Nat, Nat))
let nested2 : (Nat, Nat)
let tup1 : (Nat, Nat)
let x : Nat
let y : Nat
let z : Nat
-- Interpreting tuples.as:
-- Finished tuples.as:
let a : Nat = 3
let nested1 : (Nat, (Nat, Nat)) = (1, (2, 3))
let nested2 : (Nat, Nat) = (2, 3)
let tup1 : (Nat, Nat) = (1, 2)
let x : Nat = 1
let y : Nat = 2
let z : Nat = 3

Compiler:
(module
  (type $0 (func))
  (table $0 1 1 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 32)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.const 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.const 2)
    (i32.store align=1)
    (set_local 1)
    (get_local 1)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.load align=1)
    (set_local 2)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 3)
    (drop)
    (get_local 2)
    (i32.const 1)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 3)
    (i32.const 2)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 32)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.const 1)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (get_global 0)
    (get_global 0)
    (i32.const 32)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.const 2)
    (i32.store align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.const 3)
    (i32.store align=1)
    (i32.store align=1)
    (set_local 4)
    (get_local 4)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.load align=1)
    (drop)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 5)
    (drop)
    (get_local 5)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.load align=1)
    (drop)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 6)
    (drop)
    (get_local 6)
    (i32.const 3)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 4)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.load align=1)
    (drop)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.add)
    (i32.load align=1)
    (drop)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.add)
    (i32.load align=1)
    (set_local 7)
    (drop)
    (drop)
    (get_local 7)
    (i32.const 3)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 0)
  (elem 0 (offset (i32.const 0)) 0)
)
Interpreting the .wat:
