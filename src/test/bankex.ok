Interpreter:
-- Checking bankex.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
type Bank <: actor {getIssuer : () -> async Issuer; getReserve : () -> async Account}
type Issuer <: actor {hasIssued : (like Account) -> async Bool}
let Account : Int -> Account
let Bank : Int -> Bank
let Issuer : () -> Issuer
let b : Bank
let main : async (Account, Account)
let show : (Text, Account) -> ()
let test : () -> async (Account, Account)
let transfer : (Account, Account, Int) -> async ()
-- Interpreting bankex.as:
Bank(100)
  Issuer()
    <= {hasIssued = func}
  Account(100)
    <= {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
  <= {getIssuer = func; getReserve = func; issuer = {hasIssued = func}; reserve = {balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func}}
test()
  -> async bankex.as:55.40-67.2
  <= async _ #0
<- async bankex.as:55.40-67.2
  -> message getReserve()
  => await bankex.as:56.17-56.37
<- message getReserve()
  getReserve()
    -> async bankex.as:5.32-6.21
    <= async _ #0
<- async bankex.as:5.32-6.21
<- await bankex.as:56.17-56.37({balance = 100; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bankex.as:57.12-57.35
<- message split(10)
  split(10)
    -> async bankex.as:22.39-25.4
    <= async _ #0
<- async bankex.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bankex.as:57.12-57.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message split(10)
  => await bankex.as:58.12-58.35
<- message split(10)
  split(10)
    -> async bankex.as:22.39-25.4
    <= async _ #0
<- async bankex.as:22.39-25.4
  Account(10)
    <= {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bankex.as:58.12-58.35({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  transfer({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, 5)
    -> async bankex.as:45.91-48.2
    <= async _ #0
  => await bankex.as:62.3-62.28
<- async bankex.as:45.91-48.2
  -> message split(5)
  => await bankex.as:46.13-46.39
<- message split(5)
  split(5)
    -> async bankex.as:22.39-25.4
    <= async _ #0
<- async bankex.as:22.39-25.4
  Account(5)
    <= {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}
<- await bankex.as:46.13-46.39({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  -> message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  <= ()
<- message join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
  join({balance = 10; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    credit(5)
      <= ()
    <= ()
<- await bankex.as:62.3-62.28()
  show("reserve", {balance = 80; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a1", {balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  show("a2", {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
    <= ()
  <= ({balance = 5; credit = func; getBalance = func; isCompatible = func; join = func; split = func}, {balance = 15; credit = func; getBalance = func; isCompatible = func; join = func; split = func})
-- Finished bankex.as:
let Account : Int -> Account = func
let Bank : Int -> Bank = func
let Issuer : () -> Issuer = func
let b : Bank = Bank
let main : async (Account, Account) = async (Account, Account)
let show : (Text, Account) -> () = func
let test : () -> async (Account, Account) = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
(module (type $0 (func)) (func $0 (type 0)) (start 0))
Interpreting the .wat:
