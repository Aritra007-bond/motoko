Interpreter:
-- Checking mutrec2.as:
let even : Nat -> Bool
let odd : Nat -> Bool
var sub : Nat
-- Interpreting mutrec2.as:
even(0)
  <= true
even(2)
  odd(1)
    even(0)
      <= true
    <= true
  <= true
even(4)
  odd(3)
    even(2)
      odd(1)
        even(0)
          <= true
        <= true
      <= true
    <= true
  <= true
even(6)
  odd(5)
    even(4)
      odd(3)
        even(2)
          odd(1)
            even(0)
              <= true
            <= true
          <= true
        <= true
      <= true
    <= true
  <= true
odd(5)
  even(4)
    odd(3)
      even(2)
        odd(1)
          even(0)
            <= true
          <= true
        <= true
      <= true
    <= true
  <= true
odd(6)
  even(5)
    odd(4)
      even(3)
        odd(2)
          even(1)
            odd(0)
              <= false
            <= false
          <= false
        <= false
      <= false
    <= false
  <= false
-- Finished mutrec2.as:
let even : Nat -> Bool = func
let odd : Nat -> Bool = func

mutrec2.as:12.12-12.17: fatal error, Invalid_argument("as_nat")

Raised at file "value.ml", line 132, characters 22-42
Called from file "value.ml", line 183, characters 34-44
Called from file "main.ml", line 37, characters 18-45
Called from file "map.ml", line 270, characters 20-25
Called from file "main.ml", line 75, characters 6-42

Last context:
even = func
n = 0
odd = func
sub = 1

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 3 3 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4 align=1)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8 align=1)
    (set_local 4)
    (get_local 1)
    (set_local 5)
    (get_local 5)
    (i32.const 0)
    (i32.eq)
    (if
      (result i32)
      (then (i32.const 0) (return))
      (else
        (get_local 3)
        (set_local 6)
        (get_local 6)
        (get_local 5)
        (get_local 4)
        (i32.sub)
        (get_local 6)
        (i32.load align=1)
        (call_indirect (type 1))
        (return)
      )
    )
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4 align=1)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8 align=1)
    (set_local 4)
    (get_local 1)
    (set_local 5)
    (get_local 5)
    (i32.const 0)
    (i32.eq)
    (if
      (result i32)
      (then (i32.const 1) (return))
      (else
        (get_local 3)
        (set_local 6)
        (get_local 6)
        (get_local 5)
        (get_local 4)
        (i32.sub)
        (get_local 6)
        (i32.load align=1)
        (call_indirect (type 1))
        (return)
      )
    )
  )
  (func $2
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 2)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (i32.const 1)
    (set_local 1)
    (get_local 2)
    (i32.const 1)
    (i32.store align=1)
    (get_local 2)
    (get_local 3)
    (i32.store offset=4 align=1)
    (get_local 2)
    (get_local 1)
    (i32.store offset=8 align=1)
    (get_local 3)
    (i32.const 0)
    (i32.store align=1)
    (get_local 3)
    (get_local 2)
    (i32.store offset=4 align=1)
    (get_local 3)
    (get_local 1)
    (i32.store offset=8 align=1)
    (get_local 2)
    (set_local 9)
    (get_local 9)
    (i32.const 0)
    (get_local 9)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 2)
    (set_local 8)
    (get_local 8)
    (i32.const 2)
    (get_local 8)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 2)
    (set_local 7)
    (get_local 7)
    (i32.const 4)
    (get_local 7)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 2)
    (set_local 6)
    (get_local 6)
    (i32.const 6)
    (get_local 6)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 3)
    (set_local 5)
    (get_local 5)
    (i32.const 5)
    (get_local 5)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 3)
    (set_local 4)
    (get_local 4)
    (i32.const 6)
    (get_local 4)
    (i32.load align=1)
    (call_indirect (type 1))
    (if (result i32) (then (i32.const 0)) (else (i32.const 1)))
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 2)
  (elem 0 (offset (i32.const 0)) 0 1 2)
)
Interpreting the .wat:
