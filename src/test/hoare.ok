Interpreter:
-- Checking hoare.as:
let a : var Int[]
let partition : (var Int[], Nat, Nat) -> Nat
let quicksort : (var Int[], Nat, Nat) -> ()
let swap : (var Int[], Nat, Nat) -> ()
-- Interpreting hoare.as:
quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
    swap([8, 3, 9, 5, 2], 0, 4)
      <= ()
    swap([2, 3, 9, 5, 8], 2, 4)
      <= ()
    swap([2, 3, 8, 5, 9], 2, 3)
      <= ()
    <= 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
    partition([2, 3, 5, 8, 9], 0, 3)
      <= 0
    quicksort([2, 3, 5, 8, 9], 0, 0)
      <= ()
    quicksort([2, 3, 5, 8, 9], 1, 3)
      partition([2, 3, 5, 8, 9], 1, 3)
        <= 1
      quicksort([2, 3, 5, 8, 9], 1, 1)
        <= ()
      quicksort([2, 3, 5, 8, 9], 2, 3)
        partition([2, 3, 5, 8, 9], 2, 3)
          <= 2
        quicksort([2, 3, 5, 8, 9], 2, 2)
          <= ()
        quicksort([2, 3, 5, 8, 9], 3, 3)
          <= ()
        <= ()
      <= ()
    <= ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
    <= ()
  <= ()
-- Finished hoare.as:
let a : var Int[] = [2, 3, 5, 8, 9]
let partition : (var Int[], Nat, Nat) -> Nat = func
let quicksort : (var Int[], Nat, Nat) -> () = func
let swap : (var Int[], Nat, Nat) -> () = func

Compiler:
(module
  (type $0 (func))
  (func $0
    (type 0)
    (local i32)
    (unreachable)
    (set_local 0)
    (unreachable)
    (unreachable)
    (i32.const 2)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 3)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 5)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 8)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 9)
    (i32.eq)
    (if (then) (else (unreachable)))
  )
  (start 0)
)
Interpreting the .wat:
hoare.wat:6.5-6.18: runtime trap: unreachable executed
