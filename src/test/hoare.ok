Interpreter:
-- Checking hoare.as:
let a : var Int[]
let partition : (var Int[], Nat, Nat) -> Nat
let quicksort : (var Int[], Nat, Nat) -> ()
let swap : (var Int[], Nat, Nat) -> ()
-- Interpreting hoare.as:
quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
    swap([8, 3, 9, 5, 2], 0, 4)
      <= ()
    swap([2, 3, 9, 5, 8], 2, 4)
      <= ()
    swap([2, 3, 8, 5, 9], 2, 3)
      <= ()
    <= 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
    partition([2, 3, 5, 8, 9], 0, 3)
      <= 0
    quicksort([2, 3, 5, 8, 9], 0, 0)
      <= ()
    quicksort([2, 3, 5, 8, 9], 1, 3)
      partition([2, 3, 5, 8, 9], 1, 3)
        <= 1
      quicksort([2, 3, 5, 8, 9], 1, 1)
        <= ()
      quicksort([2, 3, 5, 8, 9], 2, 3)
        partition([2, 3, 5, 8, 9], 2, 3)
          <= 2
        quicksort([2, 3, 5, 8, 9], 2, 2)
          <= ()
        quicksort([2, 3, 5, 8, 9], 3, 3)
          <= ()
        <= ()
      <= ()
    <= ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
    <= ()
  <= ()
-- Finished hoare.as:
let a : var Int[] = [2, 3, 5, 8, 9]
let partition : (var Int[], Nat, Nat) -> Nat = func
let quicksort : (var Int[], Nat, Nat) -> () = func
let swap : (var Int[], Nat, Nat) -> () = func

Compiler:
compile_exp: (IdxE (VarE a) (VarE i))
compile_exp: (AssignE (IdxE (VarE a) (VarE i)) (IdxE (VarE a) (VarE j)))
compile_exp: (AssignE (IdxE (VarE a) (VarE j)) (VarE temp))
compile_exp: (IdxE (VarE a) (VarE lo))
compile_exp: (IdxE (VarE a) (VarE i))
compile_exp: (AssignE (VarE i) (BinE (VarE i) AddOp  (LitE (NatLit 1))))
compile_exp: (IdxE (VarE a) (VarE j))
compile_exp: (AssignE (VarE j) (BinE (VarE j) SubOp  (LitE (NatLit 1))))
compile_exp: (ArrayE
  (LitE (IntLit 8))
  (LitE (IntLit 3))
  (LitE (IntLit 9))
  (LitE (IntLit 5))
  (LitE (IntLit 2))
)
compile_exp: (IdxE (VarE a) (LitE (NatLit 0)))
compile_exp: (IdxE (VarE a) (LitE (NatLit 1)))
compile_exp: (IdxE (VarE a) (LitE (NatLit 2)))
compile_exp: (IdxE (VarE a) (LitE (NatLit 3)))
compile_exp: (IdxE (VarE a) (LitE (NatLit 4)))
(module
  (type $0 (func (param i32 i32 i32)))
  (type $1 (func (param i32 i32 i32) (result i32)))
  (type $2 (func (param i32 i32 i32)))
  (type $3 (func))
  (func $0 (type 0) (unreachable) (set_local 3) (unreachable) (unreachable))
  (func $1
    (type 1)
    (unreachable)
    (set_local 3)
    (get_local 1)
    (set_local 4)
    (get_local 2)
    (set_local 5)
    (loop
      (loop (unreachable) (get_local 3) (i32.lt_u) (if (then (unreachable) (br 0)) (else)))
      (loop (unreachable) (get_local 3) (i32.gt_u) (if (then (unreachable) (br 0)) (else)))
      (get_local 4)
      (get_local 5)
      (i32.ge_u)
      (if (then (get_local 5) (return)) (else))
      (get_local 0)
      (get_local 4)
      (get_local 5)
      (call 0)
      (br 0)
    )
  )
  (func $2
    (type 2)
    (get_local 1)
    (get_local 2)
    (i32.lt_u)
    (if
      (then
        (get_local 0)
        (get_local 1)
        (get_local 2)
        (call 1)
        (set_local 3)
        (get_local 0)
        (get_local 1)
        (get_local 3)
        (call 2)
        (get_local 0)
        (get_local 3)
        (i32.const 1)
        (i32.add)
        (get_local 2)
        (call 2)
      )
      (else)
    )
  )
  (func $3
    (type 3)
    (unreachable)
    (set_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.const 4)
    (call 2)
    (unreachable)
    (i32.const 2)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 3)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 5)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 8)
    (i32.eq)
    (if (then) (else (unreachable)))
    (unreachable)
    (i32.const 9)
    (i32.eq)
    (if (then) (else (unreachable)))
  )
  (start 3)
)
Interpreting the .wat:
hoare.wat:6.46-6.47: invalid module: unknown local 3
