Interpreter:
-- Checking hoare.as:
let a : var Int[]
let partition : (var Int[], Nat, Nat) -> Nat
let quicksort : (var Int[], Nat, Nat) -> ()
let swap : (var Int[], Nat, Nat) -> ()
-- Interpreting hoare.as:
quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
    swap([8, 3, 9, 5, 2], 0, 4)
      <= ()
    swap([2, 3, 9, 5, 8], 2, 4)
      <= ()
    swap([2, 3, 8, 5, 9], 2, 3)
      <= ()
    <= 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
    partition([2, 3, 5, 8, 9], 0, 3)
      <= 0
    quicksort([2, 3, 5, 8, 9], 0, 0)
      <= ()
    quicksort([2, 3, 5, 8, 9], 1, 3)
      partition([2, 3, 5, 8, 9], 1, 3)
        <= 1
      quicksort([2, 3, 5, 8, 9], 1, 1)
        <= ()
      quicksort([2, 3, 5, 8, 9], 2, 3)
        partition([2, 3, 5, 8, 9], 2, 3)
          <= 2
        quicksort([2, 3, 5, 8, 9], 2, 2)
          <= ()
        quicksort([2, 3, 5, 8, 9], 3, 3)
          <= ()
        <= ()
      <= ()
    <= ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
    <= ()
  <= ()
-- Finished hoare.as:
let a : var Int[] = [2, 3, 5, 8, 9]
let partition : (var Int[], Nat, Nat) -> Nat = func
let quicksort : (var Int[], Nat, Nat) -> () = func
let swap : (var Int[], Nat, Nat) -> () = func

Compiler:
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 4 4 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 2)
    (get_local 6)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=8)
    (set_local 2)
    (get_local 7)
    (get_local 2)
    (i32.store)
    (drop)
    (get_local 6)
    (i32.load)
    (get_local 7)
    (i32.load)
    (i32.lt_s)
    (if
      (result i32)
      (then
        (get_global 0)
        (get_global 0)
        (i32.const 4)
        (i32.add)
        (set_global 0)
        (set_local 8)
        (get_local 3)
        (i32.load)
        (set_local 11)
        (get_local 11)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 7)
        (i32.load)
        (i32.store offset=8)
        (get_local 11)
        (i32.load)
        (call_indirect (type 1))
        (set_local 2)
        (get_local 8)
        (get_local 2)
        (i32.store)
        (get_local 4)
        (i32.load)
        (set_local 10)
        (get_local 10)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 6)
        (i32.load)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 8)
        (i32.load)
        (i32.store offset=8)
        (get_local 10)
        (i32.load)
        (call_indirect (type 1))
        (drop)
        (get_local 4)
        (i32.load)
        (set_local 9)
        (get_local 9)
        (get_global 0)
        (get_global 0)
        (i32.const 12)
        (i32.add)
        (set_global 0)
        (tee_local 2)
        (get_local 2)
        (get_local 5)
        (i32.load)
        (i32.store)
        (tee_local 2)
        (get_local 2)
        (get_local 8)
        (i32.load)
        (i32.const 1)
        (i32.add)
        (i32.store offset=4)
        (tee_local 2)
        (get_local 2)
        (get_local 7)
        (i32.load)
        (i32.store offset=8)
        (get_local 9)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
    )
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=8)
    (set_local 2)
    (get_local 6)
    (get_local 2)
    (i32.store)
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 8)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 9)
    (get_local 4)
    (i32.load)
    (get_local 5)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 2)
    (get_local 7)
    (get_local 2)
    (i32.store)
    (get_local 8)
    (get_local 5)
    (i32.load)
    (i32.store)
    (get_local 9)
    (get_local 6)
    (i32.load)
    (i32.store)
    (loop
      (loop
        (get_local 4)
        (i32.load)
        (get_local 8)
        (i32.load)
        (i32.const 4)
        (i32.mul)
        (i32.add)
        (i32.load)
        (get_local 7)
        (i32.load)
        (i32.lt_s)
        (if
          (then
            (get_local 8)
            (get_local 8)
            (i32.load)
            (i32.const 1)
            (i32.add)
            (i32.store)
            (i32.const 0)
            (drop)
            (br 1)
          )
          (else)
        )
      )
      (i32.const 0)
      (drop)
      (loop
        (get_local 4)
        (i32.load)
        (get_local 9)
        (i32.load)
        (i32.const 4)
        (i32.mul)
        (i32.add)
        (i32.load)
        (get_local 7)
        (i32.load)
        (i32.gt_s)
        (if
          (then
            (get_local 9)
            (get_local 9)
            (i32.load)
            (i32.const 1)
            (i32.sub)
            (i32.store)
            (i32.const 0)
            (drop)
            (br 1)
          )
          (else)
        )
      )
      (i32.const 0)
      (drop)
      (get_local 8)
      (i32.load)
      (get_local 9)
      (i32.load)
      (i32.ge_s)
      (if
        (result i32)
        (then (get_local 9) (i32.load) (return))
        (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
      )
      (drop)
      (get_local 3)
      (i32.load)
      (set_local 10)
      (get_local 10)
      (get_global 0)
      (get_global 0)
      (i32.const 12)
      (i32.add)
      (set_global 0)
      (tee_local 2)
      (get_local 2)
      (get_local 4)
      (i32.load)
      (i32.store)
      (tee_local 2)
      (get_local 2)
      (get_local 8)
      (i32.load)
      (i32.store offset=4)
      (tee_local 2)
      (get_local 2)
      (get_local 9)
      (i32.load)
      (i32.store offset=8)
      (get_local 10)
      (i32.load)
      (call_indirect (type 1))
      (br 0)
    )
    (unreachable)
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 2)
    (get_local 3)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=8)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 6)
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (set_local 2)
    (get_local 6)
    (get_local 2)
    (i32.store)
    (get_local 3)
    (i32.load)
    (get_local 4)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (get_local 3)
    (i32.load)
    (get_local 5)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.store)
    (i32.const 0)
    (drop)
    (get_local 3)
    (i32.load)
    (get_local 5)
    (i32.load)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (get_local 6)
    (i32.load)
    (i32.store)
    (i32.const 0)
  )
  (func $3
    (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 2)
    (get_local 1)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 4)
    (get_local 3)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 6)
    (get_local 5)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_local 1)
    (i32.const 2)
    (i32.store)
    (get_local 3)
    (i32.const 1)
    (i32.store)
    (get_local 3)
    (get_local 2)
    (i32.store offset=4)
    (get_local 5)
    (i32.const 0)
    (i32.store)
    (get_local 5)
    (get_local 4)
    (i32.store offset=4)
    (get_local 5)
    (get_local 6)
    (i32.store offset=8)
    (get_global 0)
    (get_global 0)
    (i32.const 20)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (i32.const 8)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (i32.const 3)
    (i32.store offset=4)
    (tee_local 0)
    (get_local 0)
    (i32.const 9)
    (i32.store offset=8)
    (tee_local 0)
    (get_local 0)
    (i32.const 5)
    (i32.store offset=12)
    (tee_local 0)
    (get_local 0)
    (i32.const 2)
    (i32.store offset=16)
    (set_local 0)
    (get_local 7)
    (get_local 0)
    (i32.store)
    (get_local 6)
    (i32.load)
    (set_local 8)
    (get_local 8)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (tee_local 0)
    (get_local 0)
    (get_local 7)
    (i32.load)
    (i32.store)
    (tee_local 0)
    (get_local 0)
    (i32.const 0)
    (i32.store offset=4)
    (tee_local 0)
    (get_local 0)
    (i32.const 4)
    (i32.store offset=8)
    (get_local 8)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 7)
    (i32.load)
    (i32.const 0)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 7)
    (i32.load)
    (i32.const 1)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 7)
    (i32.load)
    (i32.const 2)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 5)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 7)
    (i32.load)
    (i32.const 3)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 8)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
    (get_local 7)
    (i32.load)
    (i32.const 4)
    (i32.const 4)
    (i32.mul)
    (i32.add)
    (i32.load)
    (i32.const 9)
    (i32.eq)
    (if (result i32) (then (i32.const 0)) (else (unreachable)))
    (drop)
  )
  (start 3)
  (elem 0 (offset (i32.const 0)) 0 1 2 3)
)
Interpreting the .wat:
