Interpreter:
-- Checking concat.as:
let testText : (Text, Text) -> ()
-- Interpreting concat.as:
-- Finished concat.as:
let testText : (Text, Text) -> () = func

Compiler:
compile_binop: CatOp 
compile_binop: CatOp 
compile_binop: CatOp 
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 2 2 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32 i32 i32)
    (get_local 1)
    (tee_local 2)
    (get_local 2)
    (i32.load)
    (set_local 3)
    (tee_local 2)
    (get_local 2)
    (i32.load offset=4)
    (set_local 4)
    (drop)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 5)
    (get_local 3)
    (get_local 4)
    (unreachable)
    (set_local 6)
    (get_local 3)
    (set_local 7)
    (get_local 7)
    (get_local 4)
    (unreachable)
    (set_local 7)
    (i32.const 0)
  )
  (func $1
    (type 0)
    (local i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_local 1)
    (i32.const 0)
    (i32.store)
    (get_local 1)
    (drop)
  )
  (start 1)
  (elem 0 (offset (i32.const 0)) 0 1)
)
Interpreting the .wat:
