Interpreter:
-- Checking actors.as:
let ignore : (async ()) -> ()
let tictac_actor : actor {tac_msg : Int -> (); tic_msg : Int -> ()}
let tictac_actor_async : actor {tac_msg_async : Int -> async (); tic_msg_async : Int -> async ()}
let tictac_async : {tac_async : Int -> async (); tic_async : Int -> async ()}
-- Interpreting actors.as:
-> message tic_msg(10)
tic_async(10)
  -> async actors.as:10.33-10.77
  <= async _ #0
-> message tic_msg_async(10)
-> async actors.as:21.9-21.18
actors.as:22.9-22.12: execution error, arithmetic overflow
<- message tic_msg(10)
  tic_msg(10)
    -> message tac_msg(9)
    <= ()
<- async actors.as:10.33-10.77
  tac_async(9)
    -> async actors.as:11.33-11.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(10)
  tic_msg_async(10)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- async actors.as:21.9-21.18
actors.as:21.15-21.18: execution error, arithmetic overflow
<- message tac_msg(9)
  tac_msg(9)
    -> message tic_msg(8)
    <= ()
<- async actors.as:11.33-11.77
  tic_async(8)
    -> async actors.as:10.33-10.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- async actors.as:16.37-16.85
  -> message tac_msg_async(9)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg(8)
  tic_msg(8)
    -> message tac_msg(7)
    <= ()
<- async actors.as:10.33-10.77
  tac_async(7)
    -> async actors.as:11.33-11.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- message tac_msg_async(9)
  tac_msg_async(9)
    -> async actors.as:17.37-17.85
    <= async _ #0
<- message tac_msg(7)
  tac_msg(7)
    -> message tic_msg(6)
    <= ()
<- async actors.as:11.33-11.77
  tic_async(6)
    -> async actors.as:10.33-10.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- async actors.as:17.37-17.85
  -> message tic_msg_async(8)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg(6)
  tic_msg(6)
    -> message tac_msg(5)
    <= ()
<- async actors.as:10.33-10.77
  tac_async(5)
    -> async actors.as:11.33-11.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(8)
  tic_msg_async(8)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- message tac_msg(5)
  tac_msg(5)
    -> message tic_msg(4)
    <= ()
<- async actors.as:11.33-11.77
  tic_async(4)
    -> async actors.as:10.33-10.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- async actors.as:16.37-16.85
  -> message tac_msg_async(7)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg(4)
  tic_msg(4)
    -> message tac_msg(3)
    <= ()
<- async actors.as:10.33-10.77
  tac_async(3)
    -> async actors.as:11.33-11.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- message tac_msg_async(7)
  tac_msg_async(7)
    -> async actors.as:17.37-17.85
    <= async _ #0
<- message tac_msg(3)
  tac_msg(3)
    -> message tic_msg(2)
    <= ()
<- async actors.as:11.33-11.77
  tic_async(2)
    -> async actors.as:10.33-10.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- async actors.as:17.37-17.85
  -> message tic_msg_async(6)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg(2)
  tic_msg(2)
    -> message tac_msg(1)
    <= ()
<- async actors.as:10.33-10.77
  tac_async(1)
    -> async actors.as:11.33-11.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(6)
  tic_msg_async(6)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- message tac_msg(1)
  tac_msg(1)
    -> message tic_msg(0)
    <= ()
<- async actors.as:11.33-11.77
  tic_async(0)
    -> async actors.as:10.33-10.77
    <= async _ #0
  ignore(async _ #0)
    <= ()
  <= ()
<- async actors.as:16.37-16.85
  -> message tac_msg_async(5)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg(0)
  tic_msg(0)
    <= ()
<- async actors.as:10.33-10.77
  <= ()
<- message tac_msg_async(5)
  tac_msg_async(5)
    -> async actors.as:17.37-17.85
    <= async _ #0
<- async actors.as:17.37-17.85
  -> message tic_msg_async(4)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(4)
  tic_msg_async(4)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- async actors.as:16.37-16.85
  -> message tac_msg_async(3)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tac_msg_async(3)
  tac_msg_async(3)
    -> async actors.as:17.37-17.85
    <= async _ #0
<- async actors.as:17.37-17.85
  -> message tic_msg_async(2)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(2)
  tic_msg_async(2)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- async actors.as:16.37-16.85
  -> message tac_msg_async(1)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tac_msg_async(1)
  tac_msg_async(1)
    -> async actors.as:17.37-17.85
    <= async _ #0
<- async actors.as:17.37-17.85
  -> message tic_msg_async(0)
  ignore(async _ #0)
    <= ()
  <= ()
<- message tic_msg_async(0)
  tic_msg_async(0)
    -> async actors.as:16.37-16.85
    <= async _ #0
<- async actors.as:16.37-16.85
  <= ()
-- Finished actors.as:
let ignore : (async ()) -> () = func
let tictac_actor : actor {tac_msg : Int -> (); tic_msg : Int -> ()} = actor {tac_msg = func; tic_msg = func}
let tictac_actor_async : actor {tac_msg_async : Int -> async (); tic_msg_async : Int -> async ()} = actor {tac_msg_async = func; tic_msg_async = func}
let tictac_async : {tac_async : Int -> async (); tic_async : Int -> async ()} = {tac_async = func; tic_async = func}

Compiler:
compile_binop: DivOp
compile_exp: (AsyncE (BinE (LitE (NatLit 1)) DivOp (LitE (NatLit 0))))
compile_exp: (AsyncE
  (BlockE
    (ExpD
      (IfE
        (RelE (VarE n) GtOp (LitE (NatLit 0)))
        (CallE
          (VarE ignore)
          (CallE
            (DotE (VarE self) tac_msg_async)
            (BinE (VarE n) SubOp (LitE (IntLit 1)))
          )
        )
        (TupE)
      )
    )
  )
)
compile_exp: (AsyncE
  (BlockE
    (ExpD
      (IfE
        (RelE (VarE n) GtOp (LitE (NatLit 0)))
        (CallE
          (VarE ignore)
          (CallE
            (DotE (VarE self) tic_msg_async)
            (BinE (VarE n) SubOp (LitE (IntLit 1)))
          )
        )
        (TupE)
      )
    )
  )
)
compile_exp: (AsyncE
  (BlockE
    (ExpD
      (IfE
        (RelE (VarE n) GtOp (LitE (NatLit 0)))
        (CallE
          (VarE ignore)
          (CallE
            (DotE (VarE this) tac_async)
            (BinE (VarE n) SubOp (LitE (IntLit 1)))
          )
        )
        (TupE)
      )
    )
  )
)
compile_exp: (AsyncE
  (BlockE
    (ExpD
      (IfE
        (RelE (VarE n) GtOp (LitE (NatLit 0)))
        (CallE
          (VarE ignore)
          (CallE
            (DotE (VarE this) tic_async)
            (BinE (VarE n) SubOp (LitE (IntLit 1)))
          )
        )
        (TupE)
      )
    )
  )
)
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 8 8 anyfunc)
  (memory $0 1024)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (unreachable)
  )
  (func $1
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (unreachable)
  )
  (func $2
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (unreachable)
  )
  (func $3
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 0)
    (i32.load offset=8)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_local 1)
    (set_local 2)
    (get_local 5)
    (get_local 2)
    (i32.store)
    (unreachable)
  )
  (func $4
    (type 1)
    (local i32)
    (get_local 1)
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 0)
    (i32.add)
    (set_global 0)
  )
  (func $5
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (get_local 4)
    (i32.load)
    (i32.const 0)
    (i32.gt_s)
    (if
      (result i32)
      (then
        (get_local 3)
        (i32.load)
        (i32.const 20)
        (i32.add)
        (i32.load)
        (set_local 5)
        (get_local 5)
        (get_local 4)
        (i32.load)
        (i32.const 1)
        (i32.sub)
        (get_local 5)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
    )
  )
  (func $6
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_local 1)
    (set_local 2)
    (get_local 4)
    (get_local 2)
    (i32.store)
    (get_local 4)
    (i32.load)
    (i32.const 0)
    (i32.gt_s)
    (if
      (result i32)
      (then
        (get_local 3)
        (i32.load)
        (i32.const 16)
        (i32.add)
        (i32.load)
        (set_local 5)
        (get_local 5)
        (get_local 4)
        (i32.load)
        (i32.const 1)
        (i32.sub)
        (get_local 5)
        (i32.load)
        (call_indirect (type 1))
      )
      (else (get_global 0) (get_global 0) (i32.const 0) (i32.add) (set_global 0))
    )
  )
  (func $7
    (type 0)
    (local
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
      i32
    )
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 2)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 3)
    (get_local 2)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 4)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 5)
    (get_global 0)
    (get_global 0)
    (i32.const 24)
    (i32.add)
    (set_global 0)
    (set_local 25)
    (get_local 25)
    (i32.const 16)
    (i32.add)
    (set_local 26)
    (get_local 25)
    (i32.const 20)
    (i32.add)
    (set_local 27)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 28)
    (get_local 25)
    (i32.store)
    (get_local 25)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 29)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 30)
    (get_local 29)
    (i32.store)
    (get_local 29)
    (i32.const 5)
    (i32.store)
    (get_local 29)
    (get_local 28)
    (i32.store offset=4)
    (get_local 29)
    (i32.store offset=16)
    (get_local 25)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 31)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 32)
    (get_local 31)
    (i32.store)
    (get_local 31)
    (i32.const 6)
    (i32.store)
    (get_local 31)
    (get_local 28)
    (i32.store offset=4)
    (get_local 31)
    (i32.store offset=20)
    (get_local 25)
    (set_local 0)
    (get_local 1)
    (get_local 0)
    (i32.store)
    (get_local 1)
    (i32.load)
    (i32.const 16)
    (i32.add)
    (i32.load)
    (set_local 24)
    (get_local 24)
    (i32.const 10)
    (get_local 24)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_local 2)
    (i32.const 4)
    (i32.store)
    (get_global 0)
    (get_global 0)
    (i32.const 16)
    (i32.add)
    (set_global 0)
    (set_local 16)
    (get_local 16)
    (i32.const 8)
    (i32.add)
    (set_local 17)
    (get_local 16)
    (i32.const 12)
    (i32.add)
    (set_local 18)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 19)
    (get_local 16)
    (i32.store)
    (get_local 16)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 20)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 21)
    (get_local 20)
    (i32.store)
    (get_local 20)
    (i32.const 2)
    (i32.store)
    (get_local 20)
    (get_local 3)
    (i32.store offset=4)
    (get_local 20)
    (get_local 19)
    (i32.store offset=8)
    (get_local 20)
    (i32.store offset=8)
    (get_local 16)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 22)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 23)
    (get_local 22)
    (i32.store)
    (get_local 22)
    (i32.const 3)
    (i32.store)
    (get_local 22)
    (get_local 3)
    (i32.store offset=4)
    (get_local 22)
    (get_local 19)
    (i32.store offset=8)
    (get_local 22)
    (i32.store offset=12)
    (get_local 16)
    (set_local 0)
    (get_local 4)
    (get_local 0)
    (i32.store)
    (get_local 4)
    (i32.load)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (set_local 15)
    (get_local 15)
    (i32.const 10)
    (get_local 15)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 7)
    (get_local 7)
    (i32.const 0)
    (i32.add)
    (set_local 8)
    (get_local 7)
    (i32.const 4)
    (i32.add)
    (set_local 9)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 10)
    (get_local 7)
    (i32.store)
    (get_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 11)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 12)
    (get_local 11)
    (i32.store)
    (get_local 11)
    (i32.const 0)
    (i32.store)
    (get_local 11)
    (get_local 3)
    (i32.store offset=4)
    (get_local 11)
    (get_local 10)
    (i32.store offset=8)
    (get_local 11)
    (i32.store)
    (get_local 7)
    (get_global 0)
    (get_global 0)
    (i32.const 12)
    (i32.add)
    (set_global 0)
    (set_local 13)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (tee_local 14)
    (get_local 13)
    (i32.store)
    (get_local 13)
    (i32.const 1)
    (i32.store)
    (get_local 13)
    (get_local 3)
    (i32.store offset=4)
    (get_local 13)
    (get_local 10)
    (i32.store offset=8)
    (get_local 13)
    (i32.store offset=4)
    (get_local 7)
    (set_local 0)
    (get_local 5)
    (get_local 0)
    (i32.store)
    (get_local 5)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.load)
    (set_local 6)
    (get_local 6)
    (i32.const 10)
    (get_local 6)
    (i32.load)
    (call_indirect (type 1))
    (drop)
    (unreachable)
    (drop)
    (i32.const 1)
    (i32.const 0)
    (unreachable)
    (tee_local 0)
    (get_local 0)
    (drop)
    (drop)
  )
  (start 7)
  (elem 0 (offset (i32.const 0)) 0 1 2 3 4 5 6 7)
)
Interpreting the .wat:
actors.wat:71.5-71.18: runtime trap: unreachable executed
