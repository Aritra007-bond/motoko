Interpreter:
-- Checking type-equivalence.as:
-- Interpreting type-equivalence.as:
-- Finished type-equivalence.as:

Compiler:
compile_dec: (TypD A (ObjT Object (x (PrimT Int) Const)))
compile_dec: (TypD B (ObjT Object (x (PrimT Int) Const)))
compile_dec: (TypD A (ObjT Object (x (PrimT Int) Const) (y (PrimT Bool) Const)))
compile_dec: (TypD B (ObjT Object (y (PrimT Bool) Const) (x (PrimT Int) Const)))
compile_dec: (TypD
  A
  (FuncT (TupT (PrimT Int) (PrimT Bool)) (TupT (PrimT Word8) (PrimT Float)))
)
compile_dec: (TypD
  B
  (FuncT (TupT (PrimT Int) (PrimT Bool)) (TupT (PrimT Word8) (PrimT Float)))
)
compile_dec: (TypD A (FuncT (X AnyT) (VarT X) (VarT X)))
compile_dec: (TypD B (FuncT (Y AnyT) (VarT Y) (VarT Y)))
compile_dec: (TypD A (FuncT (X AnyT) (Y AnyT) (VarT X) (VarT Y)))
compile_dec: (TypD B (FuncT (Y AnyT) (X AnyT) (VarT Y) (VarT X)))
compile_dec: (TypD T (X AnyT) (Y AnyT) (VarT X))
compile_dec: (TypD A (VarT T (PrimT Int) (PrimT Bool)))
compile_dec: (TypD B (VarT T (PrimT Int) (PrimT Nat)))
compile_dec: (ClassD C (X AnyT) Object (TupP))
compile_dec: (TypD A (VarT C (PrimT Int)))
compile_dec: (TypD B (VarT C (PrimT Int)))
compile_dec: (ClassD C (X AnyT) (Y AnyT) Object (TupP))
compile_dec: (TypD A (X AnyT) (VarT C (VarT X) (PrimT Int)))
compile_dec: (TypD B (X AnyT) (VarT C (VarT X) (PrimT Int)))
compile_dec: (FuncD
  f
  (X AnyT)
  (AnnotP (VarP x) (VarT A (VarT X)))
  (VarT A (VarT X))
  (AnnotE (VarE x) (VarT B (VarT X)))
)
compile_dec: (ClassD C (X AnyT) Object (TupP))
compile_dec: (TypD T (X AnyT) (Y AnyT) (VarT X))
compile_dec: (TypD A (X AnyT) (VarT C (VarT T (VarT X) (PrimT Int))))
compile_dec: (TypD B (X AnyT) (VarT C (VarT T (VarT X) (PrimT Bool))))
compile_dec: (FuncD
  f
  (X AnyT)
  (AnnotP (VarP x) (VarT A (VarT X)))
  (VarT A (VarT X))
  (AnnotE (VarE x) (VarT B (VarT X)))
)
compile_dec: (TypD A (FuncT (X (PrimT Int)) (Y (ObjT Object)) (VarT X) (VarT Y)))
compile_dec: (TypD B (FuncT (X (PrimT Int)) (Y (ObjT Object)) (VarT X) (VarT Y)))
compile_dec: (TypD T (X AnyT) (Y AnyT) (VarT X))
compile_dec: (TypD A (FuncT (X (PrimT Int)) (Y (PrimT Int)) (VarT X) (VarT Y)))
compile_dec: (TypD
  B
  (FuncT
    (X (PrimT Int))
    (Y (VarT T (PrimT Int) (PrimT Bool)))
    (VarT X)
    (VarT Y)
  )
)
compile_dec: (TypD T (X AnyT) (Y AnyT) (VarT X))
compile_dec: (TypD A (FuncT (X (PrimT Int)) (Y (VarT X)) (VarT X) (VarT Y)))
compile_dec: (TypD
  B
  (FuncT (X (PrimT Int)) (Y (VarT T (VarT X) (PrimT Int))) (VarT X) (VarT Y))
)
compile_dec: (TypD A (ObjT Object (x (VarT A) Const)))
compile_dec: (TypD B (ObjT Object (x (VarT B) Const)))
compile_dec: (TypD A (ObjT Object (x (VarT B) Const)))
compile_dec: (TypD B (ObjT Object (x (VarT A) Const)))
compile_dec: (TypD A0 (ObjT Object (x (VarT A0) Const)))
compile_dec: (TypD A (ObjT Object (x (VarT A0) Const)))
compile_dec: (TypD B (ObjT Object (x (VarT B) Const)))
compile_dec: (TypD A (ObjT Object (x (ObjT Object (x (VarT A) Const)) Const)))
compile_dec: (TypD B (ObjT Object (x (VarT B) Const)))
(module
  (type $0 (func (param i32) (result i32)))
  (type $1 (func (param i32) (result i32)))
  (type $2 (func (param i32) (result i32)))
  (type $3 (func (param i32) (result i32)))
  (type $4 (func (param i32) (result i32)))
  (type $5 (func (param i32) (result i32)))
  (type $6 (func (param i32) (result i32)))
  (type $7 (func (param i32) (result i32)))
  (type $8 (func (param i32) (result i32)))
  (type $9 (func (param i32) (result i32)))
  (type $10 (func (param i32) (result i32)))
  (type $11 (func (param i32) (result i32)))
  (type $12 (func (param i32) (result i32)))
  (type $13 (func (param i32) (result i32)))
  (type $14 (func))
  (memory $0 100)
  (func $0 (type 0) (get_local 0))
  (func $1 (type 1) (get_local 0))
  (func $2 (type 2) (get_local 0))
  (func $3 (type 3) (get_local 0))
  (func $4 (type 4) (get_local 0))
  (func $5 (type 5) (get_local 0))
  (func $6 (type 6) (get_local 0))
  (func $7 (type 7) (get_local 0))
  (func $8 (type 8) (get_local 0))
  (func $9 (type 9) (get_local 0))
  (func $10 (type 10) (get_local 0))
  (func $11 (type 11) (get_local 0))
  (func $12 (type 12) (get_local 0))
  (func $13 (type 13) (get_local 0))
  (func $14 (type 14))
  (start 14)
)
Interpreting the .wat:
