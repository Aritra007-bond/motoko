Interpreter:
-- Checking counter.as:
type Counter <: actor {dec : () -> (); read : () -> async Int}
let Counter : Int -> Counter
let c : Counter
let show : Int -> ()
let test : () -> ()
-- Interpreting counter.as:
Counter(10)
  <= {c = 10; dec = func; read = func}
test()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  <= ()
<- message dec()
  dec()
    show(10)
      <= ()
    <= ()
<- message dec()
  dec()
    show(9)
      <= ()
    <= ()
<- message dec()
  dec()
    show(8)
      <= ()
    <= ()
<- message dec()
  dec()
    show(7)
      <= ()
    <= ()
<- message dec()
  dec()
    show(6)
      <= ()
    <= ()
<- message dec()
  dec()
    show(5)
      <= ()
    <= ()
<- message dec()
  dec()
    show(4)
      <= ()
    <= ()
<- message dec()
  dec()
    show(3)
      <= ()
    <= ()
<- message dec()
  dec()
    show(2)
      <= ()
    <= ()
<- message dec()
  dec()
    show(1)
      <= ()
    <= ()
-- Finished counter.as:
let Counter : Int -> Counter = func
let c : Counter = Counter
let show : Int -> () = func
let test : () -> () = func

Compiler:
(module (type $0 (func)) (func $0 (type 0) (unreachable)) (start 0))
Interpreting the .wat:
counter.wat:1.44-1.57: runtime trap: unreachable executed
