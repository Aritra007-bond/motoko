Interpreter:
-- Checking counter.as:
type Counter <: actor {dec : () -> (); read : () -> async Int}
let Counter : Int -> Counter
let c : Counter
let show : Int -> ()
let test : () -> ()
-- Interpreting counter.as:
Counter(10)
  <= {c = 10; dec = func; read = func}
test()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  -> message dec()
  <= ()
<- message dec()
  dec()
    show(10)
      <= ()
    <= ()
<- message dec()
  dec()
    show(9)
      <= ()
    <= ()
<- message dec()
  dec()
    show(8)
      <= ()
    <= ()
<- message dec()
  dec()
    show(7)
      <= ()
    <= ()
<- message dec()
  dec()
    show(6)
      <= ()
    <= ()
<- message dec()
  dec()
    show(5)
      <= ()
    <= ()
<- message dec()
  dec()
    show(4)
      <= ()
    <= ()
<- message dec()
  dec()
    show(3)
      <= ()
    <= ()
<- message dec()
  dec()
    show(2)
      <= ()
    <= ()
<- message dec()
  dec()
    show(1)
      <= ()
    <= ()
-- Finished counter.as:
let Counter : Int -> Counter = func
let c : Counter = Counter
let show : Int -> () = func
let test : () -> () = func

Compiler:
compile_dec: (ClassD
  Counter
  Actor
  (AnnotP (VarP i) (PrimT Int))
  (c (VarE i) Var Private)
  (dec
    (DecE
      (FuncD
        dec
        (TupP)
        (TupT)
        (BlockE
          (ExpD (CallE (VarE show) (VarE c)))
          (ExpD (AssignE (VarE c) (BinE (VarE c) SubOp (LitE (IntLit 1)))))
        )
      )
    )
    Const
    Public
  )
  (read
    (DecE
      (FuncD read (TupP) (AsyncT (PrimT Int)) (AsyncE (BlockE (ExpD (VarE c)))))
    )
    Const
    Public
  )
)
Could not find Counter
(module
  (type $0 (func))
  (type $1 (func (param i32 i32) (result i32)))
  (table $0 3 3 anyfunc)
  (memory $0 100)
  (global $0 (mut i32) (i32.const 0))
  (func $0
    (type 1)
    (local i32 i32 i32 i32)
    (get_local 0)
    (i32.load offset=4)
    (set_local 3)
    (get_local 1)
    (drop)
    (i32.const 10)
    (set_local 4)
    (loop
      (get_local 4)
      (i32.const 0)
      (i32.gt_s)
      (if
        (then
          (get_local 3)
          (i32.load)
          (set_local 5)
          (get_local 5)
          (i32.const 0)
          (get_local 5)
          (i32.load)
          (call_indirect (type 1))
          (drop)
          (get_local 4)
          (i32.const 1)
          (i32.sub)
          (set_local 4)
          (i32.const 0)
          (drop)
          (br 1)
        )
        (else)
      )
    )
    (i32.const 0)
  )
  (func $1 (type 1) (local i32 i32) (get_local 1) (set_local 3) (i32.const 0))
  (func $2
    (type 0)
    (local i32 i32 i32 i32 i32 i32)
    (get_global 0)
    (get_global 0)
    (i32.const 4)
    (i32.add)
    (set_global 0)
    (set_local 1)
    (get_global 0)
    (get_global 0)
    (i32.const 8)
    (i32.add)
    (set_global 0)
    (set_local 3)
    (get_local 1)
    (i32.const 1)
    (i32.store)
    (unreachable)
    (set_local 5)
    (get_local 5)
    (i32.const 10)
    (get_local 5)
    (i32.load)
    (call_indirect (type 1))
    (set_local 2)
    (get_local 3)
    (i32.const 0)
    (i32.store)
    (get_local 3)
    (get_local 2)
    (i32.store offset=4)
    (get_local 3)
    (set_local 4)
    (get_local 4)
    (i32.const 0)
    (get_local 4)
    (i32.load)
    (call_indirect (type 1))
    (tee_local 0)
    (get_local 0)
    (drop)
    (drop)
  )
  (start 2)
  (elem 0 (offset (i32.const 0)) 0 1 2)
)
Interpreting the .wat:
counter.wat:64.5-64.18: runtime trap: unreachable executed
