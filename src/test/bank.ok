Interpreter:
-- Checking bank.as:
type Account <: actor {getBalance : () -> async Int; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
type Bank <: actor {getIssuer : () -> async Issuer; getReserve : () -> async Account}
type Issuer <: actor {hasIssued : (like Account) -> async Bool}
let Account : Int -> Account
let Bank : Int -> Bank
let Issuer : () -> Issuer
let transfer : (Account, Account, Int) -> async ()
-- Interpreting bank.as:
-- Finished bank.as:
let Account : Int -> Account = func
let Bank : Int -> Bank = func
let Issuer : () -> Issuer = func
let transfer : (Account, Account, Int) -> async () = func

Compiler:
(module (func $main unreachable) (start $main))
Interpreting the .wat:
bank.wat:1.21-1.32: runtime trap: unreachable executed
