typechecked bank.as

 Account -> Account/3
 Bank -> Bank/1
 Issuer -> Issuer/2
 Account : Int->Account/3
 Bank : Int->Bank/1
 Issuer : ()->Issuer/2
 transfer : (Account/3,Account/3,Int)->async ()
 Bank/1 := <>actor{getIssuer: ()->async Issuer/2;getReserve: ()->async Account/3}
 Issuer/2 := <>actor{hasIssued: (like Account/3)->async Bool}
 Account/3 := <>actor{getBalance: ()->async Int;isCompatible: (like Account/3)->async Bool;join: Account/3->();split: Int->async Account/3}
typechecked bank_ordered.as

 Account -> Account/1
 Bank -> Bank/3
 Issuer -> Issuer/2
 Account : Int->Account/1
 Bank : Int->Bank/3
 Issuer : ()->Issuer/2
 transfer : (Account/1,Account/1,Int)->async ()
 Account/1 := <>actor{getBalance: ()->async Int;isCompatible: (like Account/1)->async Bool;join: Account/1->();split: Int->async Account/1}
 Issuer/2 := <>actor{hasIssued: (like Account/1)->async Bool}
 Bank/3 := <>actor{getIssuer: ()->async Issuer/2;getReserve: ()->async Account/1}
typechecked control.as

 Control -> Control/1
 Control : ()->Control/1
 Control/1 := <>actor{Loop: ()->();LoopWhile: ()->();NestedWhile: ()->();Test: ()->Bool;While: ()->()}
Type Error literals.as:3.18-3.25:bad literal for type Word8!
typechecked numericops.as

 TestFloat : (Float,Float)->()
 TestInt : (Int,Int)->()
 TestNat : (Nat,Nat)->()
 TestWord16 : (Word16,Word16)->()
 TestWord32 : (Word32,Word32)->()
 TestWord64 : (Word64,Word64)->()
 TestWord8 : (Word8,Word8)->()
typechecked bitops.as

 TestWord16 : (Word16,Word16)->()
 TestWord32 : (Word32,Word32)->()
 TestWord64 : (Word64,Word64)->()
 TestWord8 : (Word8,Word8)->()
typechecked relationalops.as

 TestBool : (Bool,Bool)->()
 TestChar : (Char,Char)->()
 TestFloat : (Float,Float)->()
 TestInt : (Int,Int)->()
 TestNat : (Nat,Nat)->()
 TestText : (Text,Text)->()
 TestWord16 : (Word16,Word16)->()
 TestWord32 : (Word32,Word32)->()
 TestWord64 : (Word64,Word64)->()
 TestWord8 : (Word8,Word8)->()
typechecked concat.as

 TestText : (Text,Text)->()
Type Error duplicatefield.as:4.3-4.4:duplicate field M!
Type Error nonlinearpat.as:1.5-1.14:duplicate binding for x in pattern!
typechecked typedef.as

 A -> A/12
 Arrow -> Arrow/4
 B -> B/13
 Compose -> Compose/8
 Id -> Id/9
 IntT -> IntT/1
 Seq -> Seq/11
 IntT/1 = <>Int
 Arrow/4 = <T/28,U/29>T/28->U/29
 Compose/8 = <T/30,U/31,V/32>(T/30->U/31)->(U/31->V/32)->T/30->V/32
 Id/9 = <><T/33>T/33->T/33
 Seq/11 = <A/34>(A/34,Seq/11<A/34>?)
 A/12 = <>(B/13,A/12)
 B/13 = <>(A/12,B/13)
typechecked type_equiv.as

 A -> A/5
 T -> T/3
 A : <t/14>()->A/5<t/14>
 Test0 : (T/3<Int,Bool>,T/3<Int,Nat>)->T/3<Int,Word8>
 Test1 : (<t/15>t/15->t/15,<u/16>u/16->u/16)-><c/17>c/17->c/17
 Test2 : (<t/18,u/19>t/18->u/19,<t/20,u/21>t/20->u/21)-><t/22,u/23>t/22->u/23
 Test3 : (A/5<Int>,A/5<Int>)->A/5<Int>
 Test4 : <t/24>(A/5<t/24>,A/5<t/24>)->A/5<t/24>
 Test5 : <t/25>(A/5<T/3<t/25,Int>>,A/5<T/3<t/25,Bool>>)->A/5<T/3<t/25,Word8>>
 Test6 : <t/26>(A/5<T/3<t/26,Int>>,A/5<T/3<t/26,Bool>>)->A/5<T/3<t/26,Word8>>
 T/3 = <a/12,b/13>a/12
 A/5 := <t/14>actor{}
