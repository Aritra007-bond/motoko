

Typechecking counterex.as:

 Counter := Counter/1
 Counter : Int -> Counter/1
 c : Counter/1
 show : Int -> ()
 showAsync : (Text, async Int) -> ()
 testDec : () -> ()
 testRead : () -> async ()
 Counter/1 := actor {dec : () -> (); read : () -> async Int}


Interpreting counterex.as (tracing function calls):

testDec()
testDec() => ()
testRead()
testRead() => async {?, 0}
dec()
show(10)
show(10) => ()
dec() => ()
dec()
show(9)
show(9) => ()
dec() => ()
dec()
show(8)
show(8) => ()
dec() => ()
dec()
show(7)
show(7) => ()
dec() => ()
dec()
show(6)
show(6) => ()
dec() => ()
dec()
show(5)
show(5) => ()
dec() => ()
dec()
show(4)
show(4) => ()
dec() => ()
dec()
show(3)
show(3) => ()
dec() => ()
dec()
show(2)
show(2) => ()
dec() => ()
dec()
show(1)
show(1) => ()
dec() => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(0)
show(0) => ()
dec() => ()
read()
read() => async {?, 0}
show(-1)
show(-1) => ()
showAsync(after, async {-1, 0})
showAsync(after, async {-1, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-1)
show(-1) => ()
dec() => ()
read()
read() => async {?, 0}
show(-2)
show(-2) => ()
showAsync(after, async {-2, 0})
showAsync(after, async {-2, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-2)
show(-2) => ()
dec() => ()
read()
read() => async {?, 0}
show(-3)
show(-3) => ()
showAsync(after, async {-3, 0})
showAsync(after, async {-3, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-3)
show(-3) => ()
dec() => ()
read()
read() => async {?, 0}
show(-4)
show(-4) => ()
showAsync(after, async {-4, 0})
showAsync(after, async {-4, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-4)
show(-4) => ()
dec() => ()
read()
read() => async {?, 0}
show(-5)
show(-5) => ()
showAsync(after, async {-5, 0})
showAsync(after, async {-5, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-5)
show(-5) => ()
dec() => ()
read()
read() => async {?, 0}
show(-6)
show(-6) => ()
showAsync(after, async {-6, 0})
showAsync(after, async {-6, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-6)
show(-6) => ()
dec() => ()
read()
read() => async {?, 0}
show(-7)
show(-7) => ()
showAsync(after, async {-7, 0})
showAsync(after, async {-7, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-7)
show(-7) => ()
dec() => ()
read()
read() => async {?, 0}
show(-8)
show(-8) => ()
showAsync(after, async {-8, 0})
showAsync(after, async {-8, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-8)
show(-8) => ()
dec() => ()
read()
read() => async {?, 0}
show(-9)
show(-9) => ()
showAsync(after, async {-9, 0})
showAsync(after, async {-9, 0}) => ()
showAsync(before, async {?, 0})
showAsync(before, async {?, 0}) => ()
dec()
show(-9)
show(-9) => ()
dec() => ()
read()
read() => async {?, 0}
show(-10)
show(-10) => ()
showAsync(after, async {-10, 0})
showAsync(after, async {-10, 0}) => ()

Final state counterex.as:

 Counter = func ...
 c = Counter/1
 show = func ...
 showAsync = func ...
 testDec = func ...
 testRead = func ...

