
Checking chequeex.as:
  type Account <: actor {credit : Int -> (); deposit : Cheque -> (); getBalance : () -> async Int; invoice : (Int, Account) -> async Cheque; isCompatible : (like Account) -> async Bool; join : Account -> (); split : Int -> async Account}
  type Bank <: actor {getIssuer : () -> async Issuer; getReserve : () -> async Account}
  type Cheque <: actor {deposit : () -> ()}
  type Issuer <: actor {hasIssued : (like Account) -> async Bool}
  Account : Int -> Account
  Bank : Int -> Bank
  Cheque : (Int, Account) -> Cheque
  Issuer : () -> Issuer
  bank : Bank
  main : async (Account, Account)
  show : (Text, Account) -> ()
  showBalance : (Text, Int) -> ()
  test : () -> async (Account, Account)
  transfer : (Account, Account, Int) -> async ()

Interpreting chequeex.as:
  test()
  test() => async ?#0
  getReserve()
  getReserve() => async ?#0
  split(10)
  split(10) => async ?#0
  split(10)
  split(10) => async ?#0
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}) => ()
  show("a1", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  show("a1", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}) => ()
  show("a2", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  show("a2", {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}) => ()
  transfer({balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, 5)
  transfer({balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}, 5) => async ?#0
  invoice(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  invoice(5, {balance = 10; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}) => async ?#0
  deposit({current = 5; deposit = func})
  deposit({current = 5; deposit = func}) => ()
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func})
  show("reserve", {balance = 80; credit = func; deposit = func; getBalance = func; invoice = func; isCompatible = func; join = func; split = func}) => ()
  deposit()
  deposit() => ()
  getBalance()
  getBalance() => async ?#0
  credit(5)
  credit(5) => ()
  showBalance("b1", 5)
  showBalance("b1", 5) => ()
  getBalance()
  getBalance() => async ?#0
  showBalance("b2", 15)
  showBalance("b2", 15) => ()

Finished chequeex.as:
  Account = func
  Bank = func
  Cheque = func
  Issuer = func
  bank = Bank
  main = async (Account, Account)#0
  show = func
  showBalance = func
  test = func
  transfer = func
