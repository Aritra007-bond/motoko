
Checking quicksort.as:
  type Array = <T/7> var T/7[]
  type QS <: <T/8> {quicksort : (Array<T/8>, Nat, Nat) -> ()}
  QS : <T/8> ((T/8, T/8) -> Int) -> QS<T/8>
  a : var Int[]
  cmpi : (Int, Int) -> Int
  qs : QS<Int>

Interpreting quicksort.as (tracing function calls):
  quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
  trace([8, 3, 9, 5, 2])
  trace([8, 3, 9, 5, 2]) => ()
  cmpi(8, 8)
  cmpi(8, 8) => 0
  cmpi(2, 8)
  cmpi(2, 8) => -6
  swap([8, 3, 9, 5, 2], 0, 4)
  swap([2, 3, 9, 5, 8], 0, 4) => ()
  cmpi(2, 8)
  cmpi(2, 8) => -6
  cmpi(3, 8)
  cmpi(3, 8) => -5
  cmpi(9, 8)
  cmpi(9, 8) => 1
  cmpi(8, 8)
  cmpi(8, 8) => 0
  swap([2, 3, 9, 5, 8], 2, 4)
  swap([2, 3, 8, 5, 9], 2, 4) => ()
  cmpi(8, 8)
  cmpi(8, 8) => 0
  cmpi(9, 8)
  cmpi(9, 8) => 1
  cmpi(5, 8)
  cmpi(5, 8) => -3
  swap([2, 3, 8, 5, 9], 2, 3)
  swap([2, 3, 5, 8, 9], 2, 3) => ()
  cmpi(5, 8)
  cmpi(5, 8) => -3
  cmpi(8, 8)
  cmpi(8, 8) => 0
  cmpi(8, 8)
  cmpi(8, 8) => 0
  partition([2, 3, 5, 8, 9], 0, 4) => 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
  partition([2, 3, 5, 8, 9], 0, 3)
  trace([2, 3, 5, 8, 9])
  trace([2, 3, 5, 8, 9]) => ()
  cmpi(2, 2)
  cmpi(2, 2) => 0
  cmpi(8, 2)
  cmpi(8, 2) => 6
  cmpi(5, 2)
  cmpi(5, 2) => 3
  cmpi(3, 2)
  cmpi(3, 2) => 1
  cmpi(2, 2)
  cmpi(2, 2) => 0
  partition([2, 3, 5, 8, 9], 0, 3) => 0
  quicksort([2, 3, 5, 8, 9], 0, 0)
  quicksort([2, 3, 5, 8, 9], 0, 0) => ()
  quicksort([2, 3, 5, 8, 9], 1, 3)
  partition([2, 3, 5, 8, 9], 1, 3)
  trace([2, 3, 5, 8, 9])
  trace([2, 3, 5, 8, 9]) => ()
  cmpi(3, 3)
  cmpi(3, 3) => 0
  cmpi(8, 3)
  cmpi(8, 3) => 5
  cmpi(5, 3)
  cmpi(5, 3) => 2
  cmpi(3, 3)
  cmpi(3, 3) => 0
  partition([2, 3, 5, 8, 9], 1, 3) => 1
  quicksort([2, 3, 5, 8, 9], 1, 1)
  quicksort([2, 3, 5, 8, 9], 1, 1) => ()
  quicksort([2, 3, 5, 8, 9], 2, 3)
  partition([2, 3, 5, 8, 9], 2, 3)
  trace([2, 3, 5, 8, 9])
  trace([2, 3, 5, 8, 9]) => ()
  cmpi(5, 5)
  cmpi(5, 5) => 0
  cmpi(8, 5)
  cmpi(8, 5) => 3
  cmpi(5, 5)
  cmpi(5, 5) => 0
  partition([2, 3, 5, 8, 9], 2, 3) => 2
  quicksort([2, 3, 5, 8, 9], 2, 2)
  quicksort([2, 3, 5, 8, 9], 2, 2) => ()
  quicksort([2, 3, 5, 8, 9], 3, 3)
  quicksort([2, 3, 5, 8, 9], 3, 3) => ()
  quicksort([2, 3, 5, 8, 9], 2, 3) => ()
  quicksort([2, 3, 5, 8, 9], 1, 3) => ()
  quicksort([2, 3, 5, 8, 9], 0, 3) => ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
  quicksort([2, 3, 5, 8, 9], 4, 4) => ()
  quicksort([2, 3, 5, 8, 9], 0, 4) => ()

Final state quicksort.as:
  QS = func
  a = [var 2, 3, 5, 8, 9]
  cmpi = func
  qs = QS<Int>
