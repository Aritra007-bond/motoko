-- Checking quicksort.as:
type Array<T> = var T[]
type QS<T> <: {quicksort : (Array<T>, Nat, Nat) -> ()}
let QS : <T>((T, T) -> Int) -> QS<T>
let a : Array<Int>
let cmpi : (Int, Int) -> Int
let qs : QS<Int>
-- Interpreting quicksort.as:
QS(func)
  <= {partition = func; quicksort = func; swap = func; trace = func}
quicksort([8, 3, 9, 5, 2], 0, 4)
  partition([8, 3, 9, 5, 2], 0, 4)
    trace([8, 3, 9, 5, 2])
      <= ()
    cmpi(8, 8)
      <= 0
    cmpi(2, 8)
      <= -6
    swap([8, 3, 9, 5, 2], 0, 4)
      <= ()
    cmpi(2, 8)
      <= -6
    cmpi(3, 8)
      <= -5
    cmpi(9, 8)
      <= 1
    cmpi(8, 8)
      <= 0
    swap([2, 3, 9, 5, 8], 2, 4)
      <= ()
    cmpi(8, 8)
      <= 0
    cmpi(9, 8)
      <= 1
    cmpi(5, 8)
      <= -3
    swap([2, 3, 8, 5, 9], 2, 3)
      <= ()
    cmpi(5, 8)
      <= -3
    cmpi(8, 8)
      <= 0
    cmpi(8, 8)
      <= 0
    <= 3
  quicksort([2, 3, 5, 8, 9], 0, 3)
    partition([2, 3, 5, 8, 9], 0, 3)
      trace([2, 3, 5, 8, 9])
        <= ()
      cmpi(2, 2)
        <= 0
      cmpi(8, 2)
        <= 6
      cmpi(5, 2)
        <= 3
      cmpi(3, 2)
        <= 1
      cmpi(2, 2)
        <= 0
      <= 0
    quicksort([2, 3, 5, 8, 9], 0, 0)
      <= ()
    quicksort([2, 3, 5, 8, 9], 1, 3)
      partition([2, 3, 5, 8, 9], 1, 3)
        trace([2, 3, 5, 8, 9])
          <= ()
        cmpi(3, 3)
          <= 0
        cmpi(8, 3)
          <= 5
        cmpi(5, 3)
          <= 2
        cmpi(3, 3)
          <= 0
        <= 1
      quicksort([2, 3, 5, 8, 9], 1, 1)
        <= ()
      quicksort([2, 3, 5, 8, 9], 2, 3)
        partition([2, 3, 5, 8, 9], 2, 3)
          trace([2, 3, 5, 8, 9])
            <= ()
          cmpi(5, 5)
            <= 0
          cmpi(8, 5)
            <= 3
          cmpi(5, 5)
            <= 0
          <= 2
        quicksort([2, 3, 5, 8, 9], 2, 2)
          <= ()
        quicksort([2, 3, 5, 8, 9], 3, 3)
          <= ()
        <= ()
      <= ()
    <= ()
  quicksort([2, 3, 5, 8, 9], 4, 4)
    <= ()
  <= ()
-- Finished quicksort.as:
let QS : <T>((T, T) -> Int) -> QS<T> = func
let a : Array<Int> = [2, 3, 5, 8, 9]
let cmpi : (Int, Int) -> Int = func
let qs : QS<Int> = {partition = func; quicksort = func; swap = func; trace = func}

