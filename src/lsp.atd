(* https://microsoft.github.io/language-server-protocol/specification *)


(* Abstract message *)

type message =
  { jsonrpc : string
  }
  <ocaml field_prefix="message_">


(* Notification message *)

type notification_message =
  { inherit message
  ; params : notification_message_params
  }
  <json adapter.ocaml="Lsp.Message_adapter">
  <ocaml field_prefix="notification_message_">


(*
   Incoming messages

   Incoming messages may be either request or notification messages.

   Notification messages are a subtype of response messages (notification
   messages omit the `id` field) so both are represented by the
   `incoming_message` type to allow them to be decoded in a single pass.
*)

type incoming_message =
  { inherit message
  ; ?id : int nullable
  ; params : incoming_message_params
  }
  <json adapter.ocaml="Lsp.Message_adapter">
  <ocaml field_prefix="incoming_message_">

(* All tags must also provide params, even if they are an `empty_record` *)
type incoming_message_params =
  [ Initialize <json name="initialize"> of initialize_params
  | Initialized <json name="initialized"> of initialized_params
  | TextDocumentDidOpen <json name="textDocument/didOpen"> of text_document_did_open_params
  | TextDocumentDidClose <json name="textDocument/didClose"> of text_document_did_close_params
  | TextDocumentDidChange <json name="textDocument/didChange"> of text_document_did_change_params
  | TextDocumentDidSave <json name="textDocument/didSave"> of text_document_did_save_params
  | TextDocumentHover <json name="textDocument/hover"> of text_document_position_params
  ]

(*
   Outgoing messages

   Outgoing messages may be either response or notification messages.
*)

(* Response message *)

type response_message =
  { inherit message
  ; id : int
  ; ?result : response_result nullable
  (*; ?error : response_error nullable*)
  }
  <json adapter.ocaml="Lsp.Response_message_adapter">
  <ocaml field_prefix="response_message_">

type response_result =
  [ Initialize <json name="initialize"> of initialize_result
  | TextDocumentHoverResponse <json name="textDocument/hover"> of hover_result
  ]

type hover_result =
  { contents : string
  }
  <ocaml field_prefix="hover_result_">


(* Outgoing notifications *)

type notification_message_params =
  [ WindowShowMessage <json name ="window/showMessage"> of window_show_message_params
  ]


(* "initialize" request *)

type initialize_params =
  { ?processId : int nullable
  ; ?rootPath : string nullable
  (*; rootUri : document_uri nullable*)
  (*; ?initializationOptions : any*)
  (*; capabilities : client_capabilities*)
  ; ?trace : trace nullable
  (*; ?workspaceFolders : (workspace_folder list) nullable*)
  }

type text_document_did_open_params =
  { textDocument : text_document_item
  }

type text_document_did_change_params =
  { textDocument : versioned_text_document_identifier
  }

type text_document_did_close_params =
  { textDocument : text_document_identifier
  }

type text_document_did_save_params =
  { textDocument : text_document_identifier
  }

type text_document_position_params =
  { textDocument : text_document_identifier
  ; position : position
  } <ocaml field_prefix="text_document_position_params_">

(* See https://microsoft.github.io/language-server-protocol/specification#position

   We'll have to do some work to make sure we can split text
   efficiently regardless of what line endings are being used
*)
type position =
  { line : int
  ; character : int
  }

type text_document_item =
  { uri: string
  ; text: string
  ; languageId: string
  ; version: int
  }

type text_document_identifier =
  { uri: string
  }

type versioned_text_document_identifier =
  { inherit text_document_identifier
  ; ?version: int option
  }

(*
type client_capabilities =
  { ?workspace : workspace_client_capabilities
  ; ?textDocument : text_document_client_capabilities
  ; ?experimental : any
  }
*)

type trace =
  [ Off <json name="off">
  | Messages <json name="messages">
  | Verbose <json name="verbose">
  ]


(* "initialize" response *)

type initialize_result =
  { capabilities : server_capabilities
  }

(* FIXME: incomplete *)
type server_capabilities =
  { textDocumentSync : int
  ; ?hoverProvider : bool nullable
  }

(* TODO: see LSP spec for InitializeError *)
(*type initialize_error = *)


(* "initialized" notification *)

type initialized_params = empty_record


(* "window/showMessage" notification *)

type window_show_message_params =
  { type_ <json name="type"> : int
  ; message : string
  }


(* Helpers *)

(* Empty records aren't valid in OCaml but some notifications send them in the
   `params` field. Work around that by defining a record with a field that is
   never expected to be provided. *)
type empty_record =
  { ?omitted : int nullable
  }
