Motoko 0.1 interpreter
> let Prim : module {type ErrorCode = {#error; #system}; Array_init : <T>(Nat, T) -> [var T]; Array_tabulate : <T>(Nat, Nat -> T) -> [T]; abs : Int -> Nat; btstWord16 : (Word16, Word16) -> Bool; btstWord32 : (Word32, Word32) -> Bool; btstWord64 : (Word64, Word64) -> Bool; btstWord8 : (Word8, Word8) -> Bool; charToText : Char -> Text; charToWord32 : Char -> Word32; clzWord16 : Word16 -> Word16; clzWord32 : Word32 -> Word32; clzWord64 : Word64 -> Word64; clzWord8 : Word8 -> Word8; ctzWord16 : Word16 -> Word16; ctzWord32 : Word32 -> Word32; ctzWord64 : Word64 -> Word64; ctzWord8 : Word8 -> Word8; debugPrint : Text -> (); debugPrintChar : Char -> (); debugPrintInt : Int -> (); debugPrintNat : Nat -> (); error : Text -> Error; errorCode : Error -> ErrorCode; errorMessage : Error -> Text; idlHash : Text -> Word32; int16ToInt : Int16 -> Int; int16ToWord16 : Int16 -> Word16; int32ToInt : Int32 -> Int; int32ToWord32 : Int32 -> Word32; int64ToInt : Int64 -> Int; int64ToWord64 : Int64 -> Word64; int8ToInt : Int8 -> Int; int8ToWord8 : Int8 -> Word8; intToInt16 : Int -> Int16; intToInt32 : Int -> Int32; intToInt64 : Int -> Int64; intToInt8 : Int -> Int8; intToWord16 : Int -> Word16; intToWord32 : Int -> Word32; intToWord64 : Int -> Word64; intToWord8 : Int -> Word8; nat16ToNat : Nat16 -> Nat; nat16ToWord16 : Nat16 -> Word16; nat32ToNat : Nat32 -> Nat; nat32ToWord32 : Nat32 -> Word32; nat64ToNat : Nat64 -> Nat; nat64ToWord64 : Nat64 -> Word64; nat8ToNat : Nat8 -> Nat; nat8ToWord8 : Nat8 -> Word8; natToNat16 : Nat -> Nat16; natToNat32 : Nat -> Nat32; natToNat64 : Nat -> Nat64; natToNat8 : Nat -> Nat8; natToWord16 : Nat -> Word16; natToWord32 : Nat -> Word32; natToWord64 : Nat -> Word64; natToWord8 : Nat -> Word8; popcntWord16 : Word16 -> Word16; popcntWord32 : Word32 -> Word32; popcntWord64 : Word64 -> Word64; popcntWord8 : Word8 -> Word8; rts_callback_table_count : () -> Nat; rts_callback_table_size : () -> Nat; rts_heap_size : () -> Nat; rts_total_allocation : () -> Nat; rts_version : () -> Text; word16ToInt : Word16 -> Int; word16ToInt16 : Word16 -> Int16; word16ToNat : Word16 -> Nat; word16ToNat16 : Word16 -> Nat16; word32ToChar : Word32 -> Char; word32ToInt : Word32 -> Int; word32ToInt32 : Word32 -> Int32; word32ToNat : Word32 -> Nat; word32ToNat32 : Word32 -> Nat32; word64ToInt : Word64 -> Int; word64ToInt64 : Word64 -> Int64; word64ToNat : Word64 -> Nat; word64ToNat64 : Word64 -> Nat64; word8ToInt : Word8 -> Int; word8ToInt8 : Word8 -> Int8; word8ToNat : Word8 -> Nat; word8ToNat8 : Word8 -> Nat8} = {Array_init = func; Array_tabulate = func; abs = func; btstWord16 = func; btstWord32 = func; btstWord64 = func; btstWord8 = func; charToText = func; charToWord32 = func; clzWord16 = func; clzWord32 = func; clzWord64 = func; clzWord8 = func; ctzWord16 = func; ctzWord32 = func; ctzWord64 = func; ctzWord8 = func; debugPrint = func; debugPrintChar = func; debugPrintInt = func; debugPrintNat = func; error = func; errorCode = func; errorMessage = func; idlHash = func; int16ToInt = func; int16ToWord16 = func; int32ToInt = func; int32ToWord32 = func; int64ToInt = func; int64ToWord64 = func; int8ToInt = func; int8ToWord8 = func; intToInt16 = func; intToInt32 = func; intToInt64 = func; intToInt8 = func; intToWord16 = func; intToWord32 = func; intToWord64 = func; intToWord8 = func; nat16ToNat = func; nat16ToWord16 = func; nat32ToNat = func; nat32ToWord32 = func; nat64ToNat = func; nat64ToWord64 = func; nat8ToNat = func; nat8ToWord8 = func; natToNat16 = func; natToNat32 = func; natToNat64 = func; natToNat8 = func; natToWord16 = func; natToWord32 = func; natToWord64 = func; natToWord8 = func; popcntWord16 = func; popcntWord32 = func; popcntWord64 = func; popcntWord8 = func; rts_callback_table_count = func; rts_callback_table_size = func; rts_heap_size = func; rts_total_allocation = func; rts_version = func; word16ToInt = func; word16ToInt16 = func; word16ToNat = func; word16ToNat16 = func; word32ToChar = func; word32ToInt = func; word32ToInt32 = func; word32ToNat = func; word32ToNat32 = func; word64ToInt = func; word64ToInt64 = func; word64ToNat = func; word64ToNat64 = func; word8ToInt = func; word8ToInt8 = func; word8ToNat = func; word8ToNat8 = func}
> +127 : Int8
> prim:___: execution error, numeric overflow
> -128 : Int8
> prim:___: execution error, numeric overflow
>   +32_767 : Int16
> prim:___: execution error, numeric overflow
> -32_768 : Int16
> prim:___: execution error, numeric overflow
>   +2_147_483_647 : Int32
> prim:___: execution error, numeric overflow
> -2_147_483_648 : Int32
> prim:___: execution error, numeric overflow
>   +9_223_372_036_854_775_807 : Int64
> prim:___: execution error, numeric overflow
> -9_223_372_036_854_775_808 : Int64
> prim:___: execution error, numeric overflow
>     255 : Nat8
> prim:___: execution error, numeric overflow
>   65_535 : Nat16
> prim:___: execution error, numeric overflow
>   4_294_967_295 : Nat32
> prim:___: execution error, numeric overflow
>   18_446_744_073_709_551_615 : Nat64
> prim:___: execution error, numeric overflow
>     -127 : Int8
> -127 : Int8
> -32_767 : Int16
> -32_767 : Int16
> -2_147_483_647 : Int32
> -2_147_483_647 : Int32
> -9_223_372_036_854_775_807 : Int64
> -9_223_372_036_854_775_807 : Int64
>   
