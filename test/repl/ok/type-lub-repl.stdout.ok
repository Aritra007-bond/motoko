ActorScript 0.1 interpreter
> [null, ?42, ?-25] : [(?Int)]
> [null, null] : [Null]
> [{a = 42}, {b = 42}] : [{}]
> [{a = 42}, {a = 1; b = 42}, {a = -25}] : [{a : Int}]
> [{len = func}, [1, 2, 3]] : [{len : () -> Nat}]
> [{len = func}, "hello"] : [{len : () -> Nat}]
> [[1, 2, 3], "hello"] : [{len : () -> Nat}]
> [{len = func}, [1, 2, 3], "hello"] : [{len : () -> Nat}]
> [(12, -1), (-42, 25)] : [(Int, Int)]
> [-1, 25] : [Int]
> [[-42], [25]] : [[Int]]
> [func, func] : [(Non -> Int)]
> [func, func] : [([Nat] -> Int)]
> 3 : Int
> -42 : Int
> [func, func] : [(<A>[Nat] -> Int)]
> 3 : Int
> -42 : Int
> [func, func] : [([Int] -> Nat)]
> 13 : Nat
> 3 : Nat
>         let combined : {get : Nat -> Int; keys : () -> {next : () -> ?Nat}; len : () -> Nat; vals : () -> {next : () -> ?Int}} = {get = func; keys = func; len = func; vals = func}
>       > 5 : Nat
> 5 : Nat
>   [func, func] : [(Non -> Nat)]
> > >   [func, func] : [({#bar} -> ())]
> > >   [[42], [25], [77]] : [[Any]]
>   [42, 77, [1, 2, 3]] : [Shared]
> [func, func] : [(Int -> Int)]
> 25 : Int
> 42 : Int
> 
